/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['extensions.js']) {
  _$jscoverage['extensions.js'] = [];
  _$jscoverage['extensions.js'][2] = 0;
  _$jscoverage['extensions.js'][4] = 0;
  _$jscoverage['extensions.js'][6] = 0;
  _$jscoverage['extensions.js'][7] = 0;
  _$jscoverage['extensions.js'][10] = 0;
  _$jscoverage['extensions.js'][11] = 0;
  _$jscoverage['extensions.js'][12] = 0;
  _$jscoverage['extensions.js'][14] = 0;
  _$jscoverage['extensions.js'][17] = 0;
  _$jscoverage['extensions.js'][18] = 0;
  _$jscoverage['extensions.js'][19] = 0;
  _$jscoverage['extensions.js'][21] = 0;
  _$jscoverage['extensions.js'][22] = 0;
  _$jscoverage['extensions.js'][23] = 0;
  _$jscoverage['extensions.js'][24] = 0;
  _$jscoverage['extensions.js'][26] = 0;
  _$jscoverage['extensions.js'][29] = 0;
  _$jscoverage['extensions.js'][30] = 0;
  _$jscoverage['extensions.js'][31] = 0;
  _$jscoverage['extensions.js'][32] = 0;
  _$jscoverage['extensions.js'][34] = 0;
  _$jscoverage['extensions.js'][41] = 0;
  _$jscoverage['extensions.js'][42] = 0;
  _$jscoverage['extensions.js'][43] = 0;
  _$jscoverage['extensions.js'][46] = 0;
  _$jscoverage['extensions.js'][48] = 0;
  _$jscoverage['extensions.js'][51] = 0;
  _$jscoverage['extensions.js'][54] = 0;
  _$jscoverage['extensions.js'][56] = 0;
  _$jscoverage['extensions.js'][59] = 0;
  _$jscoverage['extensions.js'][60] = 0;
  _$jscoverage['extensions.js'][61] = 0;
  _$jscoverage['extensions.js'][63] = 0;
  _$jscoverage['extensions.js'][65] = 0;
  _$jscoverage['extensions.js'][66] = 0;
  _$jscoverage['extensions.js'][67] = 0;
  _$jscoverage['extensions.js'][68] = 0;
  _$jscoverage['extensions.js'][75] = 0;
  _$jscoverage['extensions.js'][76] = 0;
  _$jscoverage['extensions.js'][77] = 0;
  _$jscoverage['extensions.js'][81] = 0;
  _$jscoverage['extensions.js'][82] = 0;
  _$jscoverage['extensions.js'][84] = 0;
  _$jscoverage['extensions.js'][85] = 0;
  _$jscoverage['extensions.js'][87] = 0;
  _$jscoverage['extensions.js'][88] = 0;
  _$jscoverage['extensions.js'][90] = 0;
  _$jscoverage['extensions.js'][91] = 0;
  _$jscoverage['extensions.js'][93] = 0;
}
_$jscoverage['extensions.js'][2]++;
exports = module.exports = (function Extensions() {
  _$jscoverage['extensions.js'][4]++;
  this.ffmpegPath = process.env.FFMPEG_PATH || "ffmpeg";
  _$jscoverage['extensions.js'][6]++;
  this.setFfmpegPath = (function (path) {
  _$jscoverage['extensions.js'][7]++;
  this.ffmpegPath = path;
});
  _$jscoverage['extensions.js'][10]++;
  this.determineFfmpegPath = (function () {
  _$jscoverage['extensions.js'][11]++;
  if (this.ffmpegPath) {
    _$jscoverage['extensions.js'][12]++;
    return this.ffmpegPath;
  }
  _$jscoverage['extensions.js'][14]++;
  return "ffmpeg";
});
  _$jscoverage['extensions.js'][17]++;
  this.gcd = (function (a, b) {
  _$jscoverage['extensions.js'][18]++;
  if (! a && ! b) {
    _$jscoverage['extensions.js'][19]++;
    return 0;
  }
  _$jscoverage['extensions.js'][21]++;
  while (a !== 0) {
    _$jscoverage['extensions.js'][22]++;
    var z = b % a;
    _$jscoverage['extensions.js'][23]++;
    b = a;
    _$jscoverage['extensions.js'][24]++;
    a = z;
}
  _$jscoverage['extensions.js'][26]++;
  return b;
});
  _$jscoverage['extensions.js'][29]++;
  this.toAspectRatio = (function (ar) {
  _$jscoverage['extensions.js'][30]++;
  var p = ar.split(":");
  _$jscoverage['extensions.js'][31]++;
  if (p.length !== 2) {
    _$jscoverage['extensions.js'][32]++;
    return undefined;
  }
  else {
    _$jscoverage['extensions.js'][34]++;
    return ({x: parseInt(p[0], 10), y: parseInt(p[1], 10)});
  }
});
  _$jscoverage['extensions.js'][41]++;
  this.ffmpegTimemarkToSeconds = (function (timemark) {
  _$jscoverage['extensions.js'][42]++;
  var parts = timemark.split(":");
  _$jscoverage['extensions.js'][43]++;
  var secs = 0;
  _$jscoverage['extensions.js'][46]++;
  secs += parseInt(parts[0], 10) * 3600;
  _$jscoverage['extensions.js'][48]++;
  secs += parseInt(parts[1], 10) * 60;
  _$jscoverage['extensions.js'][51]++;
  var secParts = parts[2].split(".");
  _$jscoverage['extensions.js'][54]++;
  secs += parseInt(secParts[0], 10);
  _$jscoverage['extensions.js'][56]++;
  return secs;
});
  _$jscoverage['extensions.js'][59]++;
  this.parseVersionString = (function (versionstr) {
  _$jscoverage['extensions.js'][60]++;
  if (typeof versionstr != "string" || versionstr.indexOf(".") == -1) {
    _$jscoverage['extensions.js'][61]++;
    return false;
  }
  _$jscoverage['extensions.js'][63]++;
  var x = versionstr.split(".");
  _$jscoverage['extensions.js'][65]++;
  var maj = parseInt(x[0], 10) || 0;
  _$jscoverage['extensions.js'][66]++;
  var min = parseInt(x[1], 10) || 0;
  _$jscoverage['extensions.js'][67]++;
  var pat = parseInt(x[2], 10) || 0;
  _$jscoverage['extensions.js'][68]++;
  return ({major: maj, minor: min, patch: pat});
});
  _$jscoverage['extensions.js'][75]++;
  this.atLeastVersion = (function (actualVersion, minVersion) {
  _$jscoverage['extensions.js'][76]++;
  var minimum = this.parseVersionString(minVersion);
  _$jscoverage['extensions.js'][77]++;
  var running = this.parseVersionString(actualVersion);
  _$jscoverage['extensions.js'][81]++;
  if (! running) {
    _$jscoverage['extensions.js'][82]++;
    return true;
  }
  _$jscoverage['extensions.js'][84]++;
  if (running.major !== minimum.major) {
    _$jscoverage['extensions.js'][85]++;
    return (running.major > minimum.major);
  }
  else {
    _$jscoverage['extensions.js'][87]++;
    if (running.minor !== minimum.minor) {
      _$jscoverage['extensions.js'][88]++;
      return (running.minor > minimum.minor);
    }
    else {
      _$jscoverage['extensions.js'][90]++;
      if (running.patch !== minimum.patch) {
        _$jscoverage['extensions.js'][91]++;
        return (running.patch > minimum.patch);
      }
      else {
        _$jscoverage['extensions.js'][93]++;
        return true;
      }
    }
  }
});
});
_$jscoverage['extensions.js'].source = ["","exports = module.exports = function Extensions() {","","  this.ffmpegPath = process.env.FFMPEG_PATH || 'ffmpeg';","","  this.setFfmpegPath = function(path) {","    this.ffmpegPath = path;","  };","","  this.determineFfmpegPath = function() {","    if (this.ffmpegPath) {","      return this.ffmpegPath;","    }","    return 'ffmpeg';","  };","","  this.gcd = function(a, b) {","    if (!a &amp;&amp; !b) {","      return 0;","    }","    while (a !== 0) {","      var z = b % a;","      b = a;","      a = z;","    }","    return b;","  };","","  this.toAspectRatio = function(ar) {","    var p = ar.split(':');","    if (p.length !== 2) {","      return undefined;","    } else {","      return {","        x: parseInt(p[0], 10),","        y: parseInt(p[1], 10)","      };","    }","  };","","  this.ffmpegTimemarkToSeconds = function(timemark) {","    var parts = timemark.split(':');","    var secs = 0;","","    // add hours","    secs += parseInt(parts[0], 10) * 3600;","    // add minutes","    secs += parseInt(parts[1], 10) * 60;","","    // split sec/msec part","    var secParts = parts[2].split('.');","","    // add seconds","    secs += parseInt(secParts[0], 10);","","    return secs;","  };","","  this.parseVersionString = function(versionstr) {","    if (typeof versionstr != 'string' || versionstr.indexOf('.') == -1) {","      return false;","    }","    var x = versionstr.split('.');","    // parse from string or default to 0 if can't parse","    var maj = parseInt(x[0], 10) || 0;","    var min = parseInt(x[1], 10) || 0;","    var pat = parseInt(x[2], 10) || 0;","    return {","      major: maj,","      minor: min,","      patch: pat","    };","  };","","  this.atLeastVersion = function(actualVersion, minVersion) {","    var minimum = this.parseVersionString(minVersion);","    var running = this.parseVersionString(actualVersion);","","    // if we can't even parse the version string (affects git builds for windows),","    // we simply return true and assume a current build","    if (!running)","      return true;","","    if (running.major !== minimum.major) {","      return (running.major &gt; minimum.major);","    } else {","      if (running.minor !== minimum.minor) {","        return (running.minor &gt; minimum.minor);","      } else {","        if (running.patch !== minimum.patch) {","          return (running.patch &gt; minimum.patch);","        } else {","          return true;","        }","      }","    }","  };","};"];
