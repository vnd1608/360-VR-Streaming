/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['processor.js']) {
  _$jscoverage['processor.js'] = [];
  _$jscoverage['processor.js'][1] = 0;
  _$jscoverage['processor.js'][11] = 0;
  _$jscoverage['processor.js'][12] = 0;
  _$jscoverage['processor.js'][14] = 0;
  _$jscoverage['processor.js'][16] = 0;
  _$jscoverage['processor.js'][18] = 0;
  _$jscoverage['processor.js'][20] = 0;
  _$jscoverage['processor.js'][21] = 0;
  _$jscoverage['processor.js'][24] = 0;
  _$jscoverage['processor.js'][26] = 0;
  _$jscoverage['processor.js'][27] = 0;
  _$jscoverage['processor.js'][30] = 0;
  _$jscoverage['processor.js'][32] = 0;
  _$jscoverage['processor.js'][33] = 0;
  _$jscoverage['processor.js'][37] = 0;
  _$jscoverage['processor.js'][38] = 0;
  _$jscoverage['processor.js'][40] = 0;
  _$jscoverage['processor.js'][41] = 0;
  _$jscoverage['processor.js'][45] = 0;
  _$jscoverage['processor.js'][46] = 0;
  _$jscoverage['processor.js'][47] = 0;
  _$jscoverage['processor.js'][48] = 0;
  _$jscoverage['processor.js'][49] = 0;
  _$jscoverage['processor.js'][50] = 0;
  _$jscoverage['processor.js'][51] = 0;
  _$jscoverage['processor.js'][55] = 0;
  _$jscoverage['processor.js'][56] = 0;
  _$jscoverage['processor.js'][57] = 0;
  _$jscoverage['processor.js'][58] = 0;
  _$jscoverage['processor.js'][59] = 0;
  _$jscoverage['processor.js'][62] = 0;
  _$jscoverage['processor.js'][64] = 0;
  _$jscoverage['processor.js'][66] = 0;
  _$jscoverage['processor.js'][67] = 0;
  _$jscoverage['processor.js'][68] = 0;
  _$jscoverage['processor.js'][70] = 0;
  _$jscoverage['processor.js'][71] = 0;
  _$jscoverage['processor.js'][75] = 0;
  _$jscoverage['processor.js'][76] = 0;
  _$jscoverage['processor.js'][79] = 0;
  _$jscoverage['processor.js'][81] = 0;
  _$jscoverage['processor.js'][82] = 0;
  _$jscoverage['processor.js'][86] = 0;
  _$jscoverage['processor.js'][89] = 0;
  _$jscoverage['processor.js'][92] = 0;
  _$jscoverage['processor.js'][93] = 0;
  _$jscoverage['processor.js'][96] = 0;
  _$jscoverage['processor.js'][97] = 0;
  _$jscoverage['processor.js'][98] = 0;
  _$jscoverage['processor.js'][99] = 0;
  _$jscoverage['processor.js'][101] = 0;
  _$jscoverage['processor.js'][102] = 0;
  _$jscoverage['processor.js'][109] = 0;
  _$jscoverage['processor.js'][110] = 0;
  _$jscoverage['processor.js'][111] = 0;
  _$jscoverage['processor.js'][112] = 0;
  _$jscoverage['processor.js'][114] = 0;
  _$jscoverage['processor.js'][115] = 0;
  _$jscoverage['processor.js'][116] = 0;
  _$jscoverage['processor.js'][117] = 0;
  _$jscoverage['processor.js'][121] = 0;
  _$jscoverage['processor.js'][122] = 0;
  _$jscoverage['processor.js'][123] = 0;
  _$jscoverage['processor.js'][131] = 0;
  _$jscoverage['processor.js'][132] = 0;
  _$jscoverage['processor.js'][133] = 0;
  _$jscoverage['processor.js'][138] = 0;
  _$jscoverage['processor.js'][139] = 0;
  _$jscoverage['processor.js'][142] = 0;
  _$jscoverage['processor.js'][143] = 0;
  _$jscoverage['processor.js'][146] = 0;
  _$jscoverage['processor.js'][155] = 0;
  _$jscoverage['processor.js'][156] = 0;
  _$jscoverage['processor.js'][157] = 0;
  _$jscoverage['processor.js'][161] = 0;
  _$jscoverage['processor.js'][162] = 0;
  _$jscoverage['processor.js'][170] = 0;
  _$jscoverage['processor.js'][171] = 0;
  _$jscoverage['processor.js'][172] = 0;
  _$jscoverage['processor.js'][176] = 0;
  _$jscoverage['processor.js'][177] = 0;
  _$jscoverage['processor.js'][178] = 0;
  _$jscoverage['processor.js'][182] = 0;
  _$jscoverage['processor.js'][183] = 0;
  _$jscoverage['processor.js'][184] = 0;
  _$jscoverage['processor.js'][185] = 0;
  _$jscoverage['processor.js'][186] = 0;
  _$jscoverage['processor.js'][189] = 0;
  _$jscoverage['processor.js'][190] = 0;
  _$jscoverage['processor.js'][191] = 0;
  _$jscoverage['processor.js'][193] = 0;
  _$jscoverage['processor.js'][195] = 0;
  _$jscoverage['processor.js'][196] = 0;
  _$jscoverage['processor.js'][198] = 0;
  _$jscoverage['processor.js'][199] = 0;
  _$jscoverage['processor.js'][200] = 0;
  _$jscoverage['processor.js'][201] = 0;
  _$jscoverage['processor.js'][204] = 0;
  _$jscoverage['processor.js'][205] = 0;
  _$jscoverage['processor.js'][206] = 0;
  _$jscoverage['processor.js'][207] = 0;
  _$jscoverage['processor.js'][208] = 0;
  _$jscoverage['processor.js'][209] = 0;
  _$jscoverage['processor.js'][210] = 0;
  _$jscoverage['processor.js'][217] = 0;
  _$jscoverage['processor.js'][219] = 0;
  _$jscoverage['processor.js'][221] = 0;
  _$jscoverage['processor.js'][222] = 0;
  _$jscoverage['processor.js'][223] = 0;
  _$jscoverage['processor.js'][226] = 0;
  _$jscoverage['processor.js'][227] = 0;
  _$jscoverage['processor.js'][230] = 0;
  _$jscoverage['processor.js'][231] = 0;
  _$jscoverage['processor.js'][232] = 0;
  _$jscoverage['processor.js'][235] = 0;
  _$jscoverage['processor.js'][237] = 0;
  _$jscoverage['processor.js'][238] = 0;
  _$jscoverage['processor.js'][241] = 0;
  _$jscoverage['processor.js'][244] = 0;
  _$jscoverage['processor.js'][246] = 0;
  _$jscoverage['processor.js'][248] = 0;
  _$jscoverage['processor.js'][249] = 0;
  _$jscoverage['processor.js'][250] = 0;
  _$jscoverage['processor.js'][251] = 0;
  _$jscoverage['processor.js'][252] = 0;
  _$jscoverage['processor.js'][257] = 0;
  _$jscoverage['processor.js'][258] = 0;
  _$jscoverage['processor.js'][259] = 0;
  _$jscoverage['processor.js'][260] = 0;
  _$jscoverage['processor.js'][261] = 0;
  _$jscoverage['processor.js'][262] = 0;
  _$jscoverage['processor.js'][263] = 0;
  _$jscoverage['processor.js'][267] = 0;
  _$jscoverage['processor.js'][269] = 0;
  _$jscoverage['processor.js'][270] = 0;
  _$jscoverage['processor.js'][271] = 0;
  _$jscoverage['processor.js'][272] = 0;
  _$jscoverage['processor.js'][274] = 0;
  _$jscoverage['processor.js'][275] = 0;
  _$jscoverage['processor.js'][279] = 0;
  _$jscoverage['processor.js'][280] = 0;
  _$jscoverage['processor.js'][283] = 0;
  _$jscoverage['processor.js'][284] = 0;
  _$jscoverage['processor.js'][285] = 0;
  _$jscoverage['processor.js'][288] = 0;
  _$jscoverage['processor.js'][289] = 0;
  _$jscoverage['processor.js'][292] = 0;
  _$jscoverage['processor.js'][293] = 0;
  _$jscoverage['processor.js'][294] = 0;
  _$jscoverage['processor.js'][296] = 0;
  _$jscoverage['processor.js'][297] = 0;
  _$jscoverage['processor.js'][298] = 0;
  _$jscoverage['processor.js'][300] = 0;
  _$jscoverage['processor.js'][301] = 0;
  _$jscoverage['processor.js'][305] = 0;
  _$jscoverage['processor.js'][306] = 0;
  _$jscoverage['processor.js'][308] = 0;
  _$jscoverage['processor.js'][309] = 0;
  _$jscoverage['processor.js'][311] = 0;
  _$jscoverage['processor.js'][313] = 0;
  _$jscoverage['processor.js'][316] = 0;
  _$jscoverage['processor.js'][318] = 0;
  _$jscoverage['processor.js'][319] = 0;
  _$jscoverage['processor.js'][324] = 0;
  _$jscoverage['processor.js'][326] = 0;
  _$jscoverage['processor.js'][328] = 0;
  _$jscoverage['processor.js'][329] = 0;
  _$jscoverage['processor.js'][330] = 0;
  _$jscoverage['processor.js'][333] = 0;
  _$jscoverage['processor.js'][334] = 0;
  _$jscoverage['processor.js'][335] = 0;
  _$jscoverage['processor.js'][336] = 0;
  _$jscoverage['processor.js'][337] = 0;
  _$jscoverage['processor.js'][339] = 0;
  _$jscoverage['processor.js'][340] = 0;
  _$jscoverage['processor.js'][341] = 0;
  _$jscoverage['processor.js'][342] = 0;
  _$jscoverage['processor.js'][343] = 0;
  _$jscoverage['processor.js'][344] = 0;
  _$jscoverage['processor.js'][345] = 0;
  _$jscoverage['processor.js'][348] = 0;
  _$jscoverage['processor.js'][351] = 0;
  _$jscoverage['processor.js'][352] = 0;
  _$jscoverage['processor.js'][353] = 0;
  _$jscoverage['processor.js'][355] = 0;
  _$jscoverage['processor.js'][356] = 0;
  _$jscoverage['processor.js'][357] = 0;
  _$jscoverage['processor.js'][358] = 0;
  _$jscoverage['processor.js'][362] = 0;
  _$jscoverage['processor.js'][363] = 0;
  _$jscoverage['processor.js'][365] = 0;
  _$jscoverage['processor.js'][366] = 0;
  _$jscoverage['processor.js'][368] = 0;
  _$jscoverage['processor.js'][370] = 0;
  _$jscoverage['processor.js'][371] = 0;
  _$jscoverage['processor.js'][375] = 0;
  _$jscoverage['processor.js'][376] = 0;
  _$jscoverage['processor.js'][380] = 0;
  _$jscoverage['processor.js'][381] = 0;
  _$jscoverage['processor.js'][382] = 0;
  _$jscoverage['processor.js'][385] = 0;
  _$jscoverage['processor.js'][387] = 0;
  _$jscoverage['processor.js'][391] = 0;
  _$jscoverage['processor.js'][393] = 0;
  _$jscoverage['processor.js'][396] = 0;
  _$jscoverage['processor.js'][397] = 0;
  _$jscoverage['processor.js'][399] = 0;
  _$jscoverage['processor.js'][401] = 0;
  _$jscoverage['processor.js'][403] = 0;
  _$jscoverage['processor.js'][404] = 0;
  _$jscoverage['processor.js'][405] = 0;
  _$jscoverage['processor.js'][408] = 0;
  _$jscoverage['processor.js'][422] = 0;
  _$jscoverage['processor.js'][425] = 0;
  _$jscoverage['processor.js'][427] = 0;
  _$jscoverage['processor.js'][430] = 0;
  _$jscoverage['processor.js'][431] = 0;
  _$jscoverage['processor.js'][434] = 0;
  _$jscoverage['processor.js'][440] = 0;
  _$jscoverage['processor.js'][441] = 0;
  _$jscoverage['processor.js'][443] = 0;
  _$jscoverage['processor.js'][444] = 0;
  _$jscoverage['processor.js'][446] = 0;
  _$jscoverage['processor.js'][447] = 0;
  _$jscoverage['processor.js'][449] = 0;
  _$jscoverage['processor.js'][450] = 0;
  _$jscoverage['processor.js'][454] = 0;
  _$jscoverage['processor.js'][455] = 0;
  _$jscoverage['processor.js'][457] = 0;
  _$jscoverage['processor.js'][458] = 0;
  _$jscoverage['processor.js'][459] = 0;
  _$jscoverage['processor.js'][462] = 0;
  _$jscoverage['processor.js'][463] = 0;
  _$jscoverage['processor.js'][466] = 0;
  _$jscoverage['processor.js'][468] = 0;
  _$jscoverage['processor.js'][470] = 0;
  _$jscoverage['processor.js'][473] = 0;
  _$jscoverage['processor.js'][474] = 0;
  _$jscoverage['processor.js'][475] = 0;
  _$jscoverage['processor.js'][478] = 0;
  _$jscoverage['processor.js'][481] = 0;
  _$jscoverage['processor.js'][482] = 0;
  _$jscoverage['processor.js'][483] = 0;
  _$jscoverage['processor.js'][484] = 0;
  _$jscoverage['processor.js'][485] = 0;
  _$jscoverage['processor.js'][487] = 0;
  _$jscoverage['processor.js'][491] = 0;
  _$jscoverage['processor.js'][496] = 0;
  _$jscoverage['processor.js'][498] = 0;
  _$jscoverage['processor.js'][499] = 0;
  _$jscoverage['processor.js'][500] = 0;
  _$jscoverage['processor.js'][501] = 0;
  _$jscoverage['processor.js'][502] = 0;
  _$jscoverage['processor.js'][504] = 0;
  _$jscoverage['processor.js'][506] = 0;
  _$jscoverage['processor.js'][515] = 0;
  _$jscoverage['processor.js'][516] = 0;
  _$jscoverage['processor.js'][519] = 0;
  _$jscoverage['processor.js'][523] = 0;
  _$jscoverage['processor.js'][524] = 0;
  _$jscoverage['processor.js'][525] = 0;
  _$jscoverage['processor.js'][526] = 0;
  _$jscoverage['processor.js'][527] = 0;
  _$jscoverage['processor.js'][528] = 0;
  _$jscoverage['processor.js'][530] = 0;
  _$jscoverage['processor.js'][531] = 0;
  _$jscoverage['processor.js'][534] = 0;
  _$jscoverage['processor.js'][535] = 0;
  _$jscoverage['processor.js'][538] = 0;
  _$jscoverage['processor.js'][539] = 0;
  _$jscoverage['processor.js'][540] = 0;
  _$jscoverage['processor.js'][541] = 0;
  _$jscoverage['processor.js'][543] = 0;
  _$jscoverage['processor.js'][544] = 0;
  _$jscoverage['processor.js'][545] = 0;
  _$jscoverage['processor.js'][546] = 0;
  _$jscoverage['processor.js'][549] = 0;
  _$jscoverage['processor.js'][550] = 0;
  _$jscoverage['processor.js'][551] = 0;
  _$jscoverage['processor.js'][552] = 0;
  _$jscoverage['processor.js'][556] = 0;
  _$jscoverage['processor.js'][557] = 0;
  _$jscoverage['processor.js'][559] = 0;
  _$jscoverage['processor.js'][560] = 0;
  _$jscoverage['processor.js'][561] = 0;
  _$jscoverage['processor.js'][562] = 0;
  _$jscoverage['processor.js'][565] = 0;
  _$jscoverage['processor.js'][566] = 0;
  _$jscoverage['processor.js'][571] = 0;
  _$jscoverage['processor.js'][572] = 0;
  _$jscoverage['processor.js'][573] = 0;
  _$jscoverage['processor.js'][577] = 0;
  _$jscoverage['processor.js'][578] = 0;
  _$jscoverage['processor.js'][580] = 0;
  _$jscoverage['processor.js'][583] = 0;
  _$jscoverage['processor.js'][584] = 0;
  _$jscoverage['processor.js'][587] = 0;
  _$jscoverage['processor.js'][588] = 0;
  _$jscoverage['processor.js'][591] = 0;
  _$jscoverage['processor.js'][592] = 0;
  _$jscoverage['processor.js'][597] = 0;
  _$jscoverage['processor.js'][598] = 0;
  _$jscoverage['processor.js'][602] = 0;
  _$jscoverage['processor.js'][604] = 0;
  _$jscoverage['processor.js'][605] = 0;
  _$jscoverage['processor.js'][607] = 0;
  _$jscoverage['processor.js'][608] = 0;
  _$jscoverage['processor.js'][609] = 0;
  _$jscoverage['processor.js'][610] = 0;
  _$jscoverage['processor.js'][612] = 0;
  _$jscoverage['processor.js'][613] = 0;
  _$jscoverage['processor.js'][615] = 0;
  _$jscoverage['processor.js'][619] = 0;
  _$jscoverage['processor.js'][620] = 0;
  _$jscoverage['processor.js'][624] = 0;
  _$jscoverage['processor.js'][626] = 0;
  _$jscoverage['processor.js'][627] = 0;
  _$jscoverage['processor.js'][629] = 0;
  _$jscoverage['processor.js'][631] = 0;
  _$jscoverage['processor.js'][633] = 0;
  _$jscoverage['processor.js'][634] = 0;
  _$jscoverage['processor.js'][638] = 0;
  _$jscoverage['processor.js'][639] = 0;
  _$jscoverage['processor.js'][640] = 0;
  _$jscoverage['processor.js'][641] = 0;
  _$jscoverage['processor.js'][646] = 0;
  _$jscoverage['processor.js'][647] = 0;
  _$jscoverage['processor.js'][650] = 0;
  _$jscoverage['processor.js'][651] = 0;
  _$jscoverage['processor.js'][655] = 0;
  _$jscoverage['processor.js'][656] = 0;
  _$jscoverage['processor.js'][660] = 0;
  _$jscoverage['processor.js'][662] = 0;
  _$jscoverage['processor.js'][664] = 0;
  _$jscoverage['processor.js'][665] = 0;
  _$jscoverage['processor.js'][666] = 0;
  _$jscoverage['processor.js'][668] = 0;
  _$jscoverage['processor.js'][669] = 0;
  _$jscoverage['processor.js'][670] = 0;
  _$jscoverage['processor.js'][673] = 0;
  _$jscoverage['processor.js'][674] = 0;
  _$jscoverage['processor.js'][676] = 0;
  _$jscoverage['processor.js'][677] = 0;
  _$jscoverage['processor.js'][679] = 0;
  _$jscoverage['processor.js'][680] = 0;
  _$jscoverage['processor.js'][685] = 0;
  _$jscoverage['processor.js'][687] = 0;
  _$jscoverage['processor.js'][689] = 0;
  _$jscoverage['processor.js'][690] = 0;
  _$jscoverage['processor.js'][692] = 0;
  _$jscoverage['processor.js'][693] = 0;
  _$jscoverage['processor.js'][695] = 0;
  _$jscoverage['processor.js'][696] = 0;
  _$jscoverage['processor.js'][698] = 0;
  _$jscoverage['processor.js'][699] = 0;
  _$jscoverage['processor.js'][701] = 0;
  _$jscoverage['processor.js'][702] = 0;
  _$jscoverage['processor.js'][707] = 0;
  _$jscoverage['processor.js'][708] = 0;
  _$jscoverage['processor.js'][709] = 0;
  _$jscoverage['processor.js'][710] = 0;
  _$jscoverage['processor.js'][715] = 0;
  _$jscoverage['processor.js'][717] = 0;
  _$jscoverage['processor.js'][719] = 0;
  _$jscoverage['processor.js'][720] = 0;
  _$jscoverage['processor.js'][726] = 0;
  _$jscoverage['processor.js'][731] = 0;
  _$jscoverage['processor.js'][732] = 0;
  _$jscoverage['processor.js'][736] = 0;
  _$jscoverage['processor.js'][737] = 0;
  _$jscoverage['processor.js'][740] = 0;
  _$jscoverage['processor.js'][741] = 0;
  _$jscoverage['processor.js'][742] = 0;
  _$jscoverage['processor.js'][743] = 0;
  _$jscoverage['processor.js'][745] = 0;
  _$jscoverage['processor.js'][748] = 0;
  _$jscoverage['processor.js'][749] = 0;
  _$jscoverage['processor.js'][752] = 0;
  _$jscoverage['processor.js'][756] = 0;
  _$jscoverage['processor.js'][758] = 0;
  _$jscoverage['processor.js'][760] = 0;
  _$jscoverage['processor.js'][763] = 0;
  _$jscoverage['processor.js'][765] = 0;
  _$jscoverage['processor.js'][768] = 0;
  _$jscoverage['processor.js'][770] = 0;
  _$jscoverage['processor.js'][773] = 0;
}
_$jscoverage['processor.js'][1]++;
var fs = require("fs"), path = require("path"), async = require("../support/async.min.js"), os = require("os").platform(), exec = require("child_process").exec, spawn = require("child_process").spawn, Registry = require("./registry"), exports = module.exports = (function Processor(command) {
  _$jscoverage['processor.js'][11]++;
  this.E_PROCESSTIMEOUT = -99;
  _$jscoverage['processor.js'][12]++;
  this._codecDataAlreadySent = false;
  _$jscoverage['processor.js'][14]++;
  this.saveToFile = (function (targetfile, callback) {
  _$jscoverage['processor.js'][16]++;
  callback = callback || (function () {
});
  _$jscoverage['processor.js'][18]++;
  this.options.outputfile = path.normalize(targetfile);
  _$jscoverage['processor.js'][20]++;
  var self = this;
  _$jscoverage['processor.js'][21]++;
  var options = this.options;
  _$jscoverage['processor.js'][24]++;
  this._prepare((function (err) {
  _$jscoverage['processor.js'][26]++;
  if (err) {
    _$jscoverage['processor.js'][27]++;
    return callback(null, null, err);
  }
  _$jscoverage['processor.js'][30]++;
  var args = self.buildFfmpegArgs(false);
  _$jscoverage['processor.js'][32]++;
  if (! args instanceof Array) {
    _$jscoverage['processor.js'][33]++;
    return callback(null, null, args);
  }
  _$jscoverage['processor.js'][37]++;
  var ffmpegProc = self._spawnProcess(args);
  _$jscoverage['processor.js'][38]++;
  if (options.inputstream) {
    _$jscoverage['processor.js'][40]++;
    options.inputstream.resume();
    _$jscoverage['processor.js'][41]++;
    options.inputstream.pipe(ffmpegProc.stdin);
  }
  _$jscoverage['processor.js'][45]++;
  var processTimer;
  _$jscoverage['processor.js'][46]++;
  if (options.timeout) {
    _$jscoverage['processor.js'][47]++;
    processTimer = setTimeout((function () {
  _$jscoverage['processor.js'][48]++;
  ffmpegProc.removeAllListeners("exit");
  _$jscoverage['processor.js'][49]++;
  ffmpegProc.kill("SIGKILL");
  _$jscoverage['processor.js'][50]++;
  options.logger.warn("process ran into a timeout (" + self.options.timeout + "s)");
  _$jscoverage['processor.js'][51]++;
  callback(self.E_PROCESSTIMEOUT, "timeout");
}), options.timeout * 1000);
  }
  _$jscoverage['processor.js'][55]++;
  var stdout = "";
  _$jscoverage['processor.js'][56]++;
  var stderr = "";
  _$jscoverage['processor.js'][57]++;
  ffmpegProc.on("exit", (function (code) {
  _$jscoverage['processor.js'][58]++;
  if (processTimer) {
    _$jscoverage['processor.js'][59]++;
    clearTimeout(processTimer);
  }
  _$jscoverage['processor.js'][62]++;
  if (self.options._updateFlvMetadata === true) {
    _$jscoverage['processor.js'][64]++;
    if (! Registry.instance.get("capabilityFlvTool2")) {
      _$jscoverage['processor.js'][66]++;
      exec("which flvtool2", (function (whichErr, whichStdOut, whichStdErr) {
  _$jscoverage['processor.js'][67]++;
  if (whichStdOut !== "") {
    _$jscoverage['processor.js'][68]++;
    Registry.instance.set("capabilityFlvTool2", true);
    _$jscoverage['processor.js'][70]++;
    exec("flvtool2 -U " + self.options.outputfile, (function (flvtoolErr, flvtoolStdout, flvtoolStderr) {
  _$jscoverage['processor.js'][71]++;
  callback(stdout, stderr, null);
}));
  }
  else {
    _$jscoverage['processor.js'][75]++;
    Registry.instance.set("capabilityFlvTool2", false);
    _$jscoverage['processor.js'][76]++;
    callback(stdout, stderr, null);
  }
}));
    }
    else {
      _$jscoverage['processor.js'][79]++;
      if (! Registry.instance.get("capabilityFlvTool2")) {
        _$jscoverage['processor.js'][81]++;
        exec("flvtool2 -U " + self.options.outputfile, (function (flvtoolErr, flvtoolStdout, flvtoolStderr) {
  _$jscoverage['processor.js'][82]++;
  callback(stdout, stderr, null);
}));
      }
      else {
        _$jscoverage['processor.js'][86]++;
        callback(stdout, stderr, null);
      }
    }
  }
  else {
    _$jscoverage['processor.js'][89]++;
    callback(stdout, stderr, null);
  }
}));
  _$jscoverage['processor.js'][92]++;
  ffmpegProc.stdout.on("data", (function (data) {
  _$jscoverage['processor.js'][93]++;
  stdout += data;
}));
  _$jscoverage['processor.js'][96]++;
  ffmpegProc.stderr.on("data", (function (data) {
  _$jscoverage['processor.js'][97]++;
  stderr += data;
  _$jscoverage['processor.js'][98]++;
  if (options.onCodecData) {
    _$jscoverage['processor.js'][99]++;
    self._checkStdErrForCodec(stderr);
  }
  _$jscoverage['processor.js'][101]++;
  if (options.onProgress) {
    _$jscoverage['processor.js'][102]++;
    self._getProgressFromStdErr(stderr, self.metaData.durationsec);
  }
}));
}));
});
  _$jscoverage['processor.js'][109]++;
  this.mergeToFile = (function (targetfile, callback) {
  _$jscoverage['processor.js'][110]++;
  this.options.outputfile = path.normalize(targetfile);
  _$jscoverage['processor.js'][111]++;
  var self = this;
  _$jscoverage['processor.js'][112]++;
  var options = this.options;
  _$jscoverage['processor.js'][114]++;
  var getExtension = (function (filename) {
  _$jscoverage['processor.js'][115]++;
  var filename = path.normalize(filename) || "";
  _$jscoverage['processor.js'][116]++;
  var ext = path.extname(filename).split(".");
  _$jscoverage['processor.js'][117]++;
  return ext[ext.length - 1];
});
  _$jscoverage['processor.js'][121]++;
  var makeIntermediateFile = (function (_mergeSource, _callback) {
  _$jscoverage['processor.js'][122]++;
  var fname = _mergeSource + ".temp.mpg";
  _$jscoverage['processor.js'][123]++;
  var command = [self.ffmpegPath, ["-i", _mergeSource, "-qscale:v", 1, fname].join(" ")];
  _$jscoverage['processor.js'][131]++;
  exec(command.join(" "), (function (err, stdout, stderr) {
  _$jscoverage['processor.js'][132]++;
  if (err) {
    _$jscoverage['processor.js'][132]++;
    throw err;
  }
  _$jscoverage['processor.js'][133]++;
  _callback(fname);
}));
});
  _$jscoverage['processor.js'][138]++;
  var concatIntermediates = (function (target, intermediatesList, _callback) {
  _$jscoverage['processor.js'][139]++;
  var fname = path.normalize(target) + ".temp.merged.mpg";
  _$jscoverage['processor.js'][142]++;
  for (var i = 0; i < intermediatesList.length; i++) {
    _$jscoverage['processor.js'][143]++;
    intermediatesList[i] = unescapePath(intermediatesList[i]);
}
  _$jscoverage['processor.js'][146]++;
  var command = [self.ffmpegPath, ["-loglevel", "panic", "-i", "concat:\"" + intermediatesList.join("|") + "\"", "-c", "copy", fname].join(" ")];
  _$jscoverage['processor.js'][155]++;
  exec(command.join(" "), (function (err, stdout, stderr) {
  _$jscoverage['processor.js'][156]++;
  if (err) {
    _$jscoverage['processor.js'][156]++;
    throw err;
  }
  _$jscoverage['processor.js'][157]++;
  _callback(fname);
}));
});
  _$jscoverage['processor.js'][161]++;
  var quantizeConcat = (function (concatResult, numFiles, _callback) {
  _$jscoverage['processor.js'][162]++;
  var command = [self.ffmpegPath, ["-i", concatResult, "-qscale:v", numFiles, targetfile].join(" ")];
  _$jscoverage['processor.js'][170]++;
  exec(command.join(" "), (function (err, stdout, stderr) {
  _$jscoverage['processor.js'][171]++;
  if (err) {
    _$jscoverage['processor.js'][171]++;
    throw err;
  }
  _$jscoverage['processor.js'][172]++;
  _callback();
}));
});
  _$jscoverage['processor.js'][176]++;
  var deleteIntermediateFiles = (function (intermediates) {
  _$jscoverage['processor.js'][177]++;
  for (var i = 0; i < intermediates.length; i++) {
    _$jscoverage['processor.js'][178]++;
    fs.unlinkSync(unescapePath(intermediates[i]));
}
});
  _$jscoverage['processor.js'][182]++;
  var unescapePath = (function (path) {
  _$jscoverage['processor.js'][183]++;
  var f = path + "";
  _$jscoverage['processor.js'][184]++;
  if (f.indexOf("\"") == 0) {
    _$jscoverage['processor.js'][184]++;
    f = f.substring(1);
  }
  _$jscoverage['processor.js'][185]++;
  if (f.lastIndexOf("\"") == f.length - 1) {
    _$jscoverage['processor.js'][185]++;
    f = f.substring(0, f.length - 1);
  }
  _$jscoverage['processor.js'][186]++;
  return f;
});
  _$jscoverage['processor.js'][189]++;
  if (options.mergeList.length <= 0) {
    _$jscoverage['processor.js'][189]++;
    throw new Error("No file added to be merged");
  }
  _$jscoverage['processor.js'][190]++;
  var mergeList = options.mergeList;
  _$jscoverage['processor.js'][191]++;
  mergeList.unshift(options.inputfile);
  _$jscoverage['processor.js'][193]++;
  var intermediateFiles = [];
  _$jscoverage['processor.js'][195]++;
  async.whilst((function () {
  _$jscoverage['processor.js'][196]++;
  return (mergeList.length != 0);
}), (function (callback) {
  _$jscoverage['processor.js'][198]++;
  makeIntermediateFile(mergeList.shift(), (function (createdIntermediateFile) {
  _$jscoverage['processor.js'][199]++;
  if (! createdIntermediateFile) {
    _$jscoverage['processor.js'][199]++;
    throw new Error("Invalid intermediate file");
  }
  _$jscoverage['processor.js'][200]++;
  intermediateFiles.push(createdIntermediateFile);
  _$jscoverage['processor.js'][201]++;
  callback();
}));
}), (function (err) {
  _$jscoverage['processor.js'][204]++;
  if (err) {
    _$jscoverage['processor.js'][204]++;
    throw err;
  }
  _$jscoverage['processor.js'][205]++;
  concatIntermediates(targetfile, intermediateFiles, (function (concatResult) {
  _$jscoverage['processor.js'][206]++;
  if (! concatResult) {
    _$jscoverage['processor.js'][206]++;
    throw new Error("Invalid concat result file");
  }
  _$jscoverage['processor.js'][207]++;
  quantizeConcat(concatResult, intermediateFiles.length, (function () {
  _$jscoverage['processor.js'][208]++;
  intermediateFiles.push(concatResult);
  _$jscoverage['processor.js'][209]++;
  deleteIntermediateFiles(intermediateFiles);
  _$jscoverage['processor.js'][210]++;
  callback();
}));
}));
}));
});
  _$jscoverage['processor.js'][217]++;
  this.writeToStream = (function (stream, callback) {
  _$jscoverage['processor.js'][219]++;
  callback = callback || (function () {
});
  _$jscoverage['processor.js'][221]++;
  if (! this.options._isStreamable) {
    _$jscoverage['processor.js'][222]++;
    this.options.logger.error("selected output format is not streamable");
    _$jscoverage['processor.js'][223]++;
    return callback(null, new Error("selected output format is not streamable"));
  }
  _$jscoverage['processor.js'][226]++;
  var self = this;
  _$jscoverage['processor.js'][227]++;
  var options = this.options;
  _$jscoverage['processor.js'][230]++;
  this._prepare((function (err) {
  _$jscoverage['processor.js'][231]++;
  if (err) {
    _$jscoverage['processor.js'][232]++;
    return callback(null, err);
  }
  _$jscoverage['processor.js'][235]++;
  var args = self.buildFfmpegArgs(true);
  _$jscoverage['processor.js'][237]++;
  if (! args instanceof Array) {
    _$jscoverage['processor.js'][238]++;
    return callback(null, args);
  }
  _$jscoverage['processor.js'][241]++;
  args.push("pipe:1");
  _$jscoverage['processor.js'][244]++;
  var ffmpegProc = self._spawnProcess(args);
  _$jscoverage['processor.js'][246]++;
  if (options.inputstream) {
    _$jscoverage['processor.js'][248]++;
    options.inputstream.resume();
    _$jscoverage['processor.js'][249]++;
    options.inputstream.pipe(ffmpegProc.stdin);
    _$jscoverage['processor.js'][250]++;
    options.inputstream.on("error", (function () {
  _$jscoverage['processor.js'][251]++;
  options.logger.debug("input stream closed, killing ffmpgeg process");
  _$jscoverage['processor.js'][252]++;
  ffmpegProc.kill();
}));
  }
  _$jscoverage['processor.js'][257]++;
  var processTimer;
  _$jscoverage['processor.js'][258]++;
  if (options.timeout) {
    _$jscoverage['processor.js'][259]++;
    processTimer = setTimeout((function () {
  _$jscoverage['processor.js'][260]++;
  ffmpegProc.removeAllListeners("exit");
  _$jscoverage['processor.js'][261]++;
  ffmpegProc.kill("SIGKILL");
  _$jscoverage['processor.js'][262]++;
  options.logger.warn("process ran into a timeout (" + options.timeout + "s)");
  _$jscoverage['processor.js'][263]++;
  callback(self.E_PROCESSTIMEOUT, "timeout");
}), options.timeout * 1000);
  }
  _$jscoverage['processor.js'][267]++;
  var stderr = "";
  _$jscoverage['processor.js'][269]++;
  ffmpegProc.stderr.on("data", (function (data) {
  _$jscoverage['processor.js'][270]++;
  stderr += data;
  _$jscoverage['processor.js'][271]++;
  if (options.onCodecData) {
    _$jscoverage['processor.js'][272]++;
    self._checkStdErrForCodec(stderr);
  }
  _$jscoverage['processor.js'][274]++;
  if (options.onProgress) {
    _$jscoverage['processor.js'][275]++;
    self._getProgressFromStdErr(stderr, self.metaData.durationsec);
  }
}));
  _$jscoverage['processor.js'][279]++;
  ffmpegProc.stdout.on("data", (function (chunk) {
  _$jscoverage['processor.js'][280]++;
  stream.write(chunk);
}));
  _$jscoverage['processor.js'][283]++;
  ffmpegProc.on("exit", (function (code, signal) {
  _$jscoverage['processor.js'][284]++;
  if (processTimer) {
    _$jscoverage['processor.js'][285]++;
    clearTimeout(processTimer);
  }
  _$jscoverage['processor.js'][288]++;
  if (/^[a-z]+:\/\//.test(options.inputfile)) {
    _$jscoverage['processor.js'][289]++;
    return callback(code, stderr);
  }
  _$jscoverage['processor.js'][292]++;
  var cb_ = (function () {
  _$jscoverage['processor.js'][293]++;
  if (! options.inputstream || ! options.inputstream.fd) {
    _$jscoverage['processor.js'][294]++;
    return callback(code, stderr);
  }
  _$jscoverage['processor.js'][296]++;
  if (! options.inputstream.fd) {
    _$jscoverage['processor.js'][297]++;
    options.inputstream.destroy();
    _$jscoverage['processor.js'][298]++;
    return callback(code, stderr);
  }
  _$jscoverage['processor.js'][300]++;
  fs.close(options.inputstream.fd, (function () {
  _$jscoverage['processor.js'][301]++;
  callback(code, stderr);
}));
});
  _$jscoverage['processor.js'][305]++;
  if (stream.fd) {
    _$jscoverage['processor.js'][306]++;
    return fs.close(stream.fd, cb_);
  }
  _$jscoverage['processor.js'][308]++;
  if (stream.end) {
    _$jscoverage['processor.js'][309]++;
    stream.end();
  }
  else {
    _$jscoverage['processor.js'][311]++;
    callback(code, "stream will not be closed");
  }
  _$jscoverage['processor.js'][313]++;
  cb_();
}));
  _$jscoverage['processor.js'][316]++;
  stream.on("close", (function () {
  _$jscoverage['processor.js'][318]++;
  options.logger.debug("Output stream closed, killing ffmpgeg process");
  _$jscoverage['processor.js'][319]++;
  ffmpegProc.kill();
}));
}));
});
  _$jscoverage['processor.js'][324]++;
  this.takeScreenshots = (function (config, folder, callback) {
  _$jscoverage['processor.js'][326]++;
  callback = callback || (function () {
});
  _$jscoverage['processor.js'][328]++;
  function _zeroPad(number, len) {
    _$jscoverage['processor.js'][329]++;
    len = len - String(number).length + 2;
    _$jscoverage['processor.js'][330]++;
    return new Array(len < 0? 0: len).join("0") + number;
}
  _$jscoverage['processor.js'][333]++;
  function _renderOutputName(j, offset) {
    _$jscoverage['processor.js'][334]++;
    var result = filename;
    _$jscoverage['processor.js'][335]++;
    if (/%0*i/.test(result)) {
      _$jscoverage['processor.js'][336]++;
      var numlen = String(result.match(/%(0*)i/)[1]).length;
      _$jscoverage['processor.js'][337]++;
      result = result.replace(/%0*i/, _zeroPad(j, numlen));
    }
    _$jscoverage['processor.js'][339]++;
    result = result.replace("%s", offset);
    _$jscoverage['processor.js'][340]++;
    result = result.replace("%w", self.options.video.width);
    _$jscoverage['processor.js'][341]++;
    result = result.replace("%h", self.options.video.height);
    _$jscoverage['processor.js'][342]++;
    result = result.replace("%r", self.options.video.width + "x" + self.options.video.height);
    _$jscoverage['processor.js'][343]++;
    result = result.replace("%f", path.basename(self.options.inputfile));
    _$jscoverage['processor.js'][344]++;
    result = result.replace("%b", path.basename(self.options.inputfile, path.extname(self.options.inputfile)));
    _$jscoverage['processor.js'][345]++;
    return result;
}
  _$jscoverage['processor.js'][348]++;
  function _screenShotInternal(callback) {
    _$jscoverage['processor.js'][351]++;
    self._prepare((function (err) {
  _$jscoverage['processor.js'][352]++;
  if (err) {
    _$jscoverage['processor.js'][353]++;
    return callback(err);
  }
  _$jscoverage['processor.js'][355]++;
  if (! self.metaData.durationsec) {
    _$jscoverage['processor.js'][356]++;
    var errString = "meta data contains no duration, aborting screenshot creation";
    _$jscoverage['processor.js'][357]++;
    self.options.logger.warn(errString);
    _$jscoverage['processor.js'][358]++;
    return callback(new Error(errString));
  }
  _$jscoverage['processor.js'][362]++;
  if (Array.isArray(timemarks)) {
    _$jscoverage['processor.js'][363]++;
    for (var i = 0; i < timemarks.length; i++) {
      _$jscoverage['processor.js'][365]++;
      if (timemarks[i].indexOf("%") > 0) {
        _$jscoverage['processor.js'][366]++;
        timemarks[i] = (parseInt(timemarks[i], 10) / 100) * self.metaData.durationsec;
      }
      _$jscoverage['processor.js'][368]++;
      if (parseInt(timemarks[i], 10) > self.metaData.durationsec) {
        _$jscoverage['processor.js'][370]++;
        timemarks.splice(i, 1);
        _$jscoverage['processor.js'][371]++;
        --i;
      }
}
    _$jscoverage['processor.js'][375]++;
    if (timemarks.length === 0) {
      _$jscoverage['processor.js'][376]++;
      timemarks[0] = (self.metaData.durationsec * 0.9);
    }
  }
  _$jscoverage['processor.js'][380]++;
  var secondOffset = (self.metaData.durationsec * 0.9) / screenshotcount;
  _$jscoverage['processor.js'][381]++;
  var donecount = 0;
  _$jscoverage['processor.js'][382]++;
  var series = [];
  _$jscoverage['processor.js'][385]++;
  var j = 1;
  _$jscoverage['processor.js'][387]++;
  var filenames = [];
  _$jscoverage['processor.js'][391]++;
  async.until((function () {
  _$jscoverage['processor.js'][393]++;
  return j > screenshotcount;
}), (function (taskcallback) {
  _$jscoverage['processor.js'][396]++;
  var offset;
  _$jscoverage['processor.js'][397]++;
  if (Array.isArray(timemarks)) {
    _$jscoverage['processor.js'][399]++;
    offset = timemarks[(j - 1)];
  }
  else {
    _$jscoverage['processor.js'][401]++;
    offset = secondOffset * j;
  }
  _$jscoverage['processor.js'][403]++;
  var fname = _renderOutputName(j, offset) + (fileextension? fileextension: ".jpg");
  _$jscoverage['processor.js'][404]++;
  var target = self.escapedPath(path.join(folder, fname), true);
  _$jscoverage['processor.js'][405]++;
  var input = self.escapedPath(self.options.inputfile, true);
  _$jscoverage['processor.js'][408]++;
  var command = [self.ffmpegPath, ["-ss", Math.floor(offset * 100) / 100, "-i", input, "-vcodec", "mjpeg", "-vframes", "1", "-an", "-f", "rawvideo", "-s", self.options.video.size, "-y", target].join(" ")];
  _$jscoverage['processor.js'][422]++;
  j++;
  _$jscoverage['processor.js'][425]++;
  if (self.options.hasOwnProperty("_nice.level") && ! os.match(/win(32|64)/)) {
    _$jscoverage['processor.js'][427]++;
    command.unshift("nice -n", self.options._nice.level || 0);
  }
  _$jscoverage['processor.js'][430]++;
  exec(command.join(" "), taskcallback);
  _$jscoverage['processor.js'][431]++;
  filenames.push(fname);
}), (function (err) {
  _$jscoverage['processor.js'][434]++;
  callback(err, filenames);
}));
}));
}
  _$jscoverage['processor.js'][440]++;
  var timemarks, screenshotcount, filename, fileextension;
  _$jscoverage['processor.js'][441]++;
  if (typeof config === "object") {
    _$jscoverage['processor.js'][443]++;
    if (config.count) {
      _$jscoverage['processor.js'][444]++;
      screenshotcount = config.count;
    }
    _$jscoverage['processor.js'][446]++;
    if (config.timemarks) {
      _$jscoverage['processor.js'][447]++;
      timemarks = config.timemarks;
    }
    _$jscoverage['processor.js'][449]++;
    if (config.fileextension) {
      _$jscoverage['processor.js'][450]++;
      fileextension = config.fileextension;
    }
  }
  else {
    _$jscoverage['processor.js'][454]++;
    screenshotcount = config;
    _$jscoverage['processor.js'][455]++;
    timemarks = null;
  }
  _$jscoverage['processor.js'][457]++;
  if (! this.options.video.size) {
    _$jscoverage['processor.js'][458]++;
    this.options.logger.warn("set size of thumbnails using 'withSize' method");
    _$jscoverage['processor.js'][459]++;
    callback(new Error("set size of thumbnails using 'withSize' method"));
  }
  _$jscoverage['processor.js'][462]++;
  filename = config.filename || "tn_%ss";
  _$jscoverage['processor.js'][463]++;
  if (! /%0*i/.test(filename) && Array.isArray(timemarks) && timemarks.length > 1) {
    _$jscoverage['processor.js'][466]++;
    filename += "_%i";
  }
  _$jscoverage['processor.js'][468]++;
  folder = folder || ".";
  _$jscoverage['processor.js'][470]++;
  var self = this;
  _$jscoverage['processor.js'][473]++;
  var check = fs.exists;
  _$jscoverage['processor.js'][474]++;
  if (! check) {
    _$jscoverage['processor.js'][475]++;
    check = path.exists;
  }
  _$jscoverage['processor.js'][478]++;
  this.options.requireMetaData = true;
  _$jscoverage['processor.js'][481]++;
  check(folder, (function (exists) {
  _$jscoverage['processor.js'][482]++;
  if (! exists) {
    _$jscoverage['processor.js'][483]++;
    fs.mkdir(folder, "0755", (function (err) {
  _$jscoverage['processor.js'][484]++;
  if (err !== null) {
    _$jscoverage['processor.js'][485]++;
    callback(err);
  }
  else {
    _$jscoverage['processor.js'][487]++;
    _screenShotInternal(callback);
  }
}));
  }
  else {
    _$jscoverage['processor.js'][491]++;
    _screenShotInternal(callback);
  }
}));
});
  _$jscoverage['processor.js'][496]++;
  this._getProgressFromStdErr = (function (stderrString, totalDurationSec) {
  _$jscoverage['processor.js'][498]++;
  var lastLine = stderrString.split(/\r\n|\r|\n/g);
  _$jscoverage['processor.js'][499]++;
  var ll = lastLine[lastLine.length - 2];
  _$jscoverage['processor.js'][500]++;
  var progress;
  _$jscoverage['processor.js'][501]++;
  if (ll) {
    _$jscoverage['processor.js'][502]++;
    progress = ll.split(/frame=([0-9\s]+)fps=([0-9\.\s]+)q=([0-9\.\s]+)(L?)size=([0-9\s]+)kB time=(([0-9]{2}):([0-9]{2}):([0-9]{2}).([0-9]{2})) bitrate=([0-9\.\s]+)kbits/gi);
  }
  _$jscoverage['processor.js'][504]++;
  if (progress && progress.length > 10) {
    _$jscoverage['processor.js'][506]++;
    var ret = {frames: parseInt(progress[1], 10), currentFps: parseInt(progress[2], 10), currentKbps: parseFloat(progress[10]), targetSize: parseInt(progress[5], 10), timemark: progress[6]};
    _$jscoverage['processor.js'][515]++;
    if (totalDurationSec && totalDurationSec > 0) {
      _$jscoverage['processor.js'][516]++;
      ret.percent = (this.ffmpegTimemarkToSeconds(ret.timemark) / totalDurationSec) * 100;
    }
    _$jscoverage['processor.js'][519]++;
    this.options.onProgress(ret);
  }
});
  _$jscoverage['processor.js'][523]++;
  this._checkStdErrForCodec = (function (stderrString) {
  _$jscoverage['processor.js'][524]++;
  var format = /Input #[0-9]+, ([^ ]+),/.exec(stderrString);
  _$jscoverage['processor.js'][525]++;
  var dur = /Duration\: ([^,]+)/.exec(stderrString);
  _$jscoverage['processor.js'][526]++;
  var audio = /Audio\: (.*)/.exec(stderrString);
  _$jscoverage['processor.js'][527]++;
  var video = /Video\: (.*)/.exec(stderrString);
  _$jscoverage['processor.js'][528]++;
  var codecObject = {format: "", audio: "", video: "", duration: ""};
  _$jscoverage['processor.js'][530]++;
  if (format && format.length > 1) {
    _$jscoverage['processor.js'][531]++;
    codecObject.format = format[1];
  }
  _$jscoverage['processor.js'][534]++;
  if (dur && dur.length > 1) {
    _$jscoverage['processor.js'][535]++;
    codecObject.duration = dur[1];
  }
  _$jscoverage['processor.js'][538]++;
  if (audio && audio.length > 1) {
    _$jscoverage['processor.js'][539]++;
    audio = audio[1].split(", ");
    _$jscoverage['processor.js'][540]++;
    codecObject.audio = audio[0];
    _$jscoverage['processor.js'][541]++;
    codecObject.audio_details = audio;
  }
  _$jscoverage['processor.js'][543]++;
  if (video && video.length > 1) {
    _$jscoverage['processor.js'][544]++;
    video = video[1].split(", ");
    _$jscoverage['processor.js'][545]++;
    codecObject.video = video[0];
    _$jscoverage['processor.js'][546]++;
    codecObject.video_details = video;
  }
  _$jscoverage['processor.js'][549]++;
  var codecInfoPassed = /Press (\[q\]|ctrl-c) to stop/.test(stderrString);
  _$jscoverage['processor.js'][550]++;
  if (codecInfoPassed) {
    _$jscoverage['processor.js'][551]++;
    this.options.onCodecData(codecObject);
    _$jscoverage['processor.js'][552]++;
    this.options.onCodecData = null;
  }
});
  _$jscoverage['processor.js'][556]++;
  this._spawnProcess = (function (args, options) {
  _$jscoverage['processor.js'][557]++;
  var retProc = spawn(this.ffmpegPath, args, options);
  _$jscoverage['processor.js'][559]++;
  if (this.options.hasOwnProperty("_nice.level") && ! os.match(/win(32|64)/)) {
    _$jscoverage['processor.js'][560]++;
    var niceLevel = this.options._nice.level || 0;
    _$jscoverage['processor.js'][561]++;
    if (niceLevel > 0) {
      _$jscoverage['processor.js'][562]++;
      niceLevel = "+" + niceLevel;
    }
    _$jscoverage['processor.js'][565]++;
    var self = this;
    _$jscoverage['processor.js'][566]++;
    var command = ["renice -n", niceLevel, "-p", retProc.pid].join(" ");
    _$jscoverage['processor.js'][571]++;
    exec(command, (function (err, stderr, stdout) {
  _$jscoverage['processor.js'][572]++;
  if (! err) {
    _$jscoverage['processor.js'][573]++;
    self.options.logger.info("successfully reniced process " + retProc.pid + " to " + niceLevel + " niceness!");
  }
}));
  }
  _$jscoverage['processor.js'][577]++;
  if (retProc.stderr) {
    _$jscoverage['processor.js'][578]++;
    retProc.stderr.setEncoding("utf8");
  }
  _$jscoverage['processor.js'][580]++;
  return retProc;
});
  _$jscoverage['processor.js'][583]++;
  this.buildFfmpegArgs = (function (overrideOutputCheck) {
  _$jscoverage['processor.js'][584]++;
  var args = [];
  _$jscoverage['processor.js'][587]++;
  if (this.options.starttime) {
    _$jscoverage['processor.js'][588]++;
    args.push("-ss", this.options.starttime);
  }
  _$jscoverage['processor.js'][591]++;
  if (this.options.video.loop) {
    _$jscoverage['processor.js'][592]++;
    args.push("-loop", 1);
  }
  _$jscoverage['processor.js'][597]++;
  if (this.options.fromFormat) {
    _$jscoverage['processor.js'][598]++;
    args.push("-f", this.options.fromFormat);
  }
  _$jscoverage['processor.js'][602]++;
  if (this.options.inputfile && ! this.options.inputstream && ! this.options.inputlive) {
    _$jscoverage['processor.js'][604]++;
    if (this.options.video.fpsInput) {
      _$jscoverage['processor.js'][605]++;
      args.push("-r", this.options.video.fpsInput);
    }
    _$jscoverage['processor.js'][607]++;
    if (/^[a-z]+:\/\//.test(this.options.inputfile)) {
      _$jscoverage['processor.js'][608]++;
      args.push("-i", this.options.inputfile.replace(" ", "%20"));
    }
    else {
      _$jscoverage['processor.js'][609]++;
      if (/%\d*d/.test(this.options.inputfile)) {
        _$jscoverage['processor.js'][610]++;
        args.push("-i", this.options.inputfile.replace(" ", " "));
      }
      else {
        _$jscoverage['processor.js'][612]++;
        var fstats = fs.statSync(this.options.inputfile);
        _$jscoverage['processor.js'][613]++;
        if (fstats.isFile()) {
          _$jscoverage['processor.js'][615]++;
          args.push("-i", this.options.inputfile.replace(/ /g, " ").replace(/'/g, "'").replace(/"/g, "\""));
        }
        else {
          _$jscoverage['processor.js'][619]++;
          this.options.logger.error("input file is not readable");
          _$jscoverage['processor.js'][620]++;
          throw new Error("input file is not readable");
        }
      }
    }
  }
  else {
    _$jscoverage['processor.js'][624]++;
    if (this.options.inputstream) {
      _$jscoverage['processor.js'][626]++;
      args.push("-i", "-");
    }
    else {
      _$jscoverage['processor.js'][627]++;
      if (this.options.inputlive) {
        _$jscoverage['processor.js'][629]++;
        if (/^[a-z]+:\/\//.test(this.options.inputfile)) {
          _$jscoverage['processor.js'][631]++;
          args.push("-i", this.options.inputfile.replace(" ", "%20") + " live=1");
        }
        else {
          _$jscoverage['processor.js'][633]++;
          this.options.logger.error("live input URI is not valid");
          _$jscoverage['processor.js'][634]++;
          throw new Error("live input URI is not valid");
        }
      }
    }
  }
  _$jscoverage['processor.js'][638]++;
  if (this.options.otherInputs) {
    _$jscoverage['processor.js'][639]++;
    if (this.options.otherInputs.length > 0) {
      _$jscoverage['processor.js'][640]++;
      this.options.otherInputs.forEach((function (el) {
  _$jscoverage['processor.js'][641]++;
  args.push("-i", el);
}));
    }
  }
  _$jscoverage['processor.js'][646]++;
  if (this.options.duration) {
    _$jscoverage['processor.js'][647]++;
    args.push("-t", this.options.duration);
  }
  _$jscoverage['processor.js'][650]++;
  if (this.options.video.framecount) {
    _$jscoverage['processor.js'][651]++;
    args.push("-vframes", this.options.video.framecount);
  }
  _$jscoverage['processor.js'][655]++;
  if (this.options.format) {
    _$jscoverage['processor.js'][656]++;
    args.push("-f", this.options.format);
  }
  _$jscoverage['processor.js'][660]++;
  if (this.options.video.skip) {
    _$jscoverage['processor.js'][662]++;
    args.push("-vn");
  }
  else {
    _$jscoverage['processor.js'][664]++;
    if (this.options.video.bitrate) {
      _$jscoverage['processor.js'][665]++;
      args.push("-b", this.options.video.bitrate + "k");
      _$jscoverage['processor.js'][666]++;
      if (this.options._useConstantVideoBitrate) {
        _$jscoverage['processor.js'][668]++;
        args.push("-maxrate", this.options.video.bitrate + "k");
        _$jscoverage['processor.js'][669]++;
        args.push("-minrate", this.options.video.bitrate + "k");
        _$jscoverage['processor.js'][670]++;
        args.push("-bufsize", "3M");
      }
    }
    _$jscoverage['processor.js'][673]++;
    if (this.options.video.codec) {
      _$jscoverage['processor.js'][674]++;
      args.push("-vcodec", this.options.video.codec);
    }
    _$jscoverage['processor.js'][676]++;
    if (this.options.video.fps) {
      _$jscoverage['processor.js'][677]++;
      args.push("-r", this.options.video.fps);
    }
    _$jscoverage['processor.js'][679]++;
    if (this.options.video.aspect) {
      _$jscoverage['processor.js'][680]++;
      args.push("-aspect", this.options.video.aspect);
    }
  }
  _$jscoverage['processor.js'][685]++;
  if (this.options.audio.skip) {
    _$jscoverage['processor.js'][687]++;
    args.push("-an");
  }
  else {
    _$jscoverage['processor.js'][689]++;
    if (this.options.audio.bitrate) {
      _$jscoverage['processor.js'][690]++;
      args.push("-ab", this.options.audio.bitrate + "k");
    }
    _$jscoverage['processor.js'][692]++;
    if (this.options.audio.channels) {
      _$jscoverage['processor.js'][693]++;
      args.push("-ac", this.options.audio.channels);
    }
    _$jscoverage['processor.js'][695]++;
    if (this.options.audio.codec) {
      _$jscoverage['processor.js'][696]++;
      args.push("-acodec", this.options.audio.codec);
    }
    _$jscoverage['processor.js'][698]++;
    if (this.options.audio.frequency) {
      _$jscoverage['processor.js'][699]++;
      args.push("-ar", this.options.audio.frequency);
    }
    _$jscoverage['processor.js'][701]++;
    if (this.options.audio.quality || this.options.audio.quality === 0) {
      _$jscoverage['processor.js'][702]++;
      args.push("-aq", this.options.audio.quality);
    }
  }
  _$jscoverage['processor.js'][707]++;
  if (this.options.additional) {
    _$jscoverage['processor.js'][708]++;
    if (this.options.additional.length > 0) {
      _$jscoverage['processor.js'][709]++;
      this.options.additional.forEach((function (el) {
  _$jscoverage['processor.js'][710]++;
  args.push(el);
}));
    }
  }
  _$jscoverage['processor.js'][715]++;
  if (this.options.video.pad && ! this.options.video.skip) {
    _$jscoverage['processor.js'][717]++;
    if (this.atLeastVersion(this.metaData.ffmpegversion, "0.7")) {
      _$jscoverage['processor.js'][719]++;
      args.push("-vf");
      _$jscoverage['processor.js'][720]++;
      args.push("pad=" + this.options.video.pad.w + ":" + this.options.video.pad.h + ":" + this.options.video.pad.x + ":" + this.options.video.pad.y + ":" + this.options.video.padcolor);
    }
    else {
      _$jscoverage['processor.js'][726]++;
      return new Error("Your ffmpeg version " + this.metaData.ffmpegversion + " does not support padding");
    }
  }
  _$jscoverage['processor.js'][731]++;
  if (this.options.video.size && ! this.options.video.skip) {
    _$jscoverage['processor.js'][732]++;
    args.push("-s", this.options.video.size);
  }
  _$jscoverage['processor.js'][736]++;
  if (this.options.video.fpsOutput) {
    _$jscoverage['processor.js'][737]++;
    args.push("-r", this.options.video.fpsOutput);
  }
  _$jscoverage['processor.js'][740]++;
  if (this.options.outputfile) {
    _$jscoverage['processor.js'][741]++;
    var target = this.escapedPath(this.options.outputfile, false);
    _$jscoverage['processor.js'][742]++;
    if (! os.match(/win(32|64)/)) {
      _$jscoverage['processor.js'][743]++;
      args.push("-y", target.replace(" ", "\\ "));
    }
    else {
      _$jscoverage['processor.js'][745]++;
      args.push("-y", target);
    }
  }
  else {
    _$jscoverage['processor.js'][748]++;
    if (! overrideOutputCheck) {
      _$jscoverage['processor.js'][749]++;
      this.options.logger.error("no outputfile specified");
    }
  }
  _$jscoverage['processor.js'][752]++;
  return args;
});
  _$jscoverage['processor.js'][756]++;
  this.requiresMetaData = (function () {
  _$jscoverage['processor.js'][758]++;
  if (this.options.video.pad && ! this.options.video.skip) {
    _$jscoverage['processor.js'][760]++;
    return true;
  }
  _$jscoverage['processor.js'][763]++;
  if (this.options.onProgress) {
    _$jscoverage['processor.js'][765]++;
    return true;
  }
  _$jscoverage['processor.js'][768]++;
  if (this.options.requireMetaData) {
    _$jscoverage['processor.js'][770]++;
    return true;
  }
  _$jscoverage['processor.js'][773]++;
  return false;
});
});
_$jscoverage['processor.js'].source = ["var fs       = require('fs'),","    path     = require('path'),","    async    = require('../support/async.min.js'),","    os       = require('os').platform(),","    exec     = require('child_process').exec,","    spawn    = require('child_process').spawn,","    Registry = require('./registry'),","","exports = module.exports = function Processor(command) {","  // constant for timeout checks","  this.E_PROCESSTIMEOUT = -99;","  this._codecDataAlreadySent = false;","","  this.saveToFile = function(targetfile, callback) {","","    callback = callback || function() {};","","    this.options.outputfile = path.normalize(targetfile);","","    var self = this;","    var options = this.options;","","    // parse options to command","    this._prepare(function(err) {","","      if (err) {","        return callback(null, null, err);","      }","","      var args = self.buildFfmpegArgs(false);","","      if (!args instanceof Array) {","        return callback (null, null, args);","      }","","      // start conversion of file using spawn","      var ffmpegProc = self._spawnProcess(args);","      if (options.inputstream) {","        // pump input stream to stdin","        options.inputstream.resume();","        options.inputstream.pipe(ffmpegProc.stdin);","      }","","      //handle timeout if set","      var processTimer;","      if (options.timeout) {","        processTimer = setTimeout(function() {","          ffmpegProc.removeAllListeners('exit');","          ffmpegProc.kill('SIGKILL');","          options.logger.warn('process ran into a timeout (' + self.options.timeout + 's)');","          callback(self.E_PROCESSTIMEOUT, 'timeout');","        }, options.timeout * 1000);","      }","","      var stdout = '';","      var stderr = '';","      ffmpegProc.on('exit', function(code) {","        if (processTimer) {","          clearTimeout(processTimer);","        }","        // check if we have to run flvtool2 to update flash video meta data","        if (self.options._updateFlvMetadata === true) {","          // make sure we didn't try to determine this capability before","          if (!Registry.instance.get('capabilityFlvTool2')) {","            // check if flvtool2 is installed","            exec('which flvtool2', function(whichErr, whichStdOut, whichStdErr) {","              if (whichStdOut !== '') {","                Registry.instance.set('capabilityFlvTool2', true);","                // update metadata in flash video","                exec('flvtool2 -U ' + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {","                  callback(stdout, stderr, null);","                });","              } else {","                // flvtool2 is not installed, skip further checks","                Registry.instance.set('capabilityFlvTool2', false);","                callback(stdout, stderr, null);","              }","            });","          } else if (!Registry.instance.get('capabilityFlvTool2')) {","            // flvtool2 capability was checked before, execute update","            exec('flvtool2 -U ' + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {","              callback(stdout, stderr, null);","            });","          } else {","            // flvtool2 not installed, skip update","            callback(stdout, stderr, null);","          }","        } else {","          callback(stdout, stderr, null);","        }","      });","      ffmpegProc.stdout.on('data', function (data) {","        stdout += data;","      });","","      ffmpegProc.stderr.on('data', function (data) {","        stderr += data;","        if (options.onCodecData) {","          self._checkStdErrForCodec(stderr);","        }","        if (options.onProgress) {","          self._getProgressFromStdErr(stderr, self.metaData.durationsec);","          ","        }","      });","    });","  };","","  this.mergeToFile = function(targetfile,callback){","    this.options.outputfile = path.normalize(targetfile);","    var self = this;","    var options = this.options;","","    var getExtension = function(filename) {","        var filename = path.normalize(filename) || '';","        var ext = path.extname(filename).split('.');","        return ext[ext.length - 1];","    };","","    // creates intermediate copies of each video.","    var makeIntermediateFile = function(_mergeSource,_callback){","        var fname =  _mergeSource+\".temp.mpg\";","        var command = [","            self.ffmpegPath,","            [","                '-i', _mergeSource,","                '-qscale:v',1,","                fname","            ].join(' ')","        ];","        exec(command.join(' '),function(err, stdout, stderr) {","            if(err)throw err;","            _callback(fname);","        });","    };","","    // concat all created intermediate copies","    var concatIntermediates = function(target,intermediatesList,_callback){","        var fname =  path.normalize(target)+\".temp.merged.mpg\";","","        // unescape paths","        for(var i=0; i&lt;intermediatesList.length; i++){","            intermediatesList[i] = unescapePath(intermediatesList[i]);","        }","","        var command = [","            self.ffmpegPath,","            [","                '-loglevel','panic', //Generetes too much muxing warnings and fills default buffer of exec. This is to ignore them.","                '-i', 'concat:\"'+intermediatesList.join(\"|\")+'\"',","                '-c',\"copy\",","                fname","            ].join(' ')","        ];","        exec(command.join(' '), function(err, stdout, stderr) {","            if(err)throw err;","            _callback(fname);","        });","    };","","    var quantizeConcat = function(concatResult,numFiles,_callback){","        var command = [","            self.ffmpegPath,","            [","                '-i', concatResult,","                '-qscale:v',numFiles,","                targetfile","            ].join(' ')","        ];","        exec(command.join(' '), function(err, stdout, stderr) {","            if(err)throw err;","            _callback();","        });","    }","","    var deleteIntermediateFiles = function(intermediates){","        for(var i=0 ; i&lt;intermediates.length ; i++){","            fs.unlinkSync( unescapePath(intermediates[i]));","        }","    }","","    var unescapePath = function(path){","        var f = path+\"\";","        if(f.indexOf('\"')==0)f = f.substring(1);","        if(f.lastIndexOf('\"')== f.length-1)f = f.substring(0, f.length-1);","        return f;","    }","","    if(options.mergeList.length&lt;=0)throw new Error(\"No file added to be merged\");","    var mergeList = options.mergeList;","    mergeList.unshift(options.inputfile)","","    var intermediateFiles = [];","","    async.whilst(function(){","        return (mergeList.length != 0);","    },function(callback){","        makeIntermediateFile(mergeList.shift(),function(createdIntermediateFile){","            if(!createdIntermediateFile)throw new Error(\"Invalid intermediate file\");","            intermediateFiles.push(createdIntermediateFile);","            callback();","        })","    },function(err){","        if(err)throw err;","        concatIntermediates(targetfile,intermediateFiles,function(concatResult){","            if(!concatResult)throw new Error(\"Invalid concat result file\");","            quantizeConcat(concatResult,intermediateFiles.length,function(){","                intermediateFiles.push(concatResult); // add concatResult to intermediates list so it can be deleted too.","                deleteIntermediateFiles(intermediateFiles);","                callback(); // completed;","            });","        });","    });","","  }","","  this.writeToStream = function(stream, callback) {","","    callback = callback || function(){};","","    if (!this.options._isStreamable) {","      this.options.logger.error('selected output format is not streamable');","      return callback(null, new Error('selected output format is not streamable'));","    }","","    var self    = this;","    var options = this.options;","","    // parse options to command","    this._prepare(function(err) {","      if (err) {","        return callback(null, err);","      }","","      var args = self.buildFfmpegArgs(true);","","      if (!args instanceof Array) {","        return callback(null, args);","      }","      // write data to stdout","      args.push('pipe:1');","","      // start conversion of file using spawn","      var ffmpegProc = self._spawnProcess(args);","","      if (options.inputstream) {","        // pump input stream to stdin","        options.inputstream.resume();","        options.inputstream.pipe(ffmpegProc.stdin);","        options.inputstream.on('error', function(){","          options.logger.debug(\"input stream closed, killing ffmpgeg process\");","          ffmpegProc.kill();","        });","      }","","      //handle timeout if set","      var processTimer;","      if (options.timeout) {","        processTimer = setTimeout(function() {","          ffmpegProc.removeAllListeners('exit');","          ffmpegProc.kill('SIGKILL');","          options.logger.warn('process ran into a timeout (' + options.timeout + 's)');","          callback(self.E_PROCESSTIMEOUT, 'timeout');","        }, options.timeout * 1000);","      }","","      var stderr = '';","","      ffmpegProc.stderr.on('data', function(data) {","        stderr += data;","        if (options.onCodecData) {","          self._checkStdErrForCodec(stderr);","        }","        if (options.onProgress) {","          self._getProgressFromStdErr(stderr, self.metaData.durationsec);","        }","      });","","      ffmpegProc.stdout.on('data', function(chunk) {","        stream.write(chunk);","      });","","      ffmpegProc.on('exit', function(code, signal) {","        if (processTimer) {","          clearTimeout(processTimer);","        }","        // close file descriptor on outstream","        if(/^[a-z]+:\\/\\//.test(options.inputfile)) {","          return callback(code, stderr);","        }","","        var cb_ = function() {","          if (!options.inputstream || !options.inputstream.fd) {","            return callback(code, stderr);","          }","          if (!options.inputstream.fd) {","            options.inputstream.destroy();","            return callback(code, stderr);","          }","          fs.close(options.inputstream.fd, function() {","            callback(code, stderr);","          });","        };","","        if (stream.fd) {","          return fs.close(stream.fd, cb_);","        }","        if (stream.end) {","          stream.end();","        } else {","          callback(code, \"stream will not be closed\");","        }","        cb_();","      });","","      stream.on(\"close\", function()","      {","        options.logger.debug(\"Output stream closed, killing ffmpgeg process\");","        ffmpegProc.kill();","      });","    });","  };","","  this.takeScreenshots = function(config, folder, callback) {","","    callback = callback || function(){};","","    function _zeroPad(number, len) {","      len = len-String(number).length+2;","      return new Array(len&lt;0?0:len).join('0')+number;","    }","","    function _renderOutputName(j, offset) {","      var result = filename;","      if(/%0*i/.test(result)) {","        var numlen = String(result.match(/%(0*)i/)[1]).length;","        result = result.replace(/%0*i/, _zeroPad(j, numlen));","      }","      result = result.replace('%s', offset);","      result = result.replace('%w', self.options.video.width);","      result = result.replace('%h', self.options.video.height);","      result = result.replace('%r', self.options.video.width+'x'+self.options.video.height);","      result = result.replace('%f', path.basename(self.options.inputfile));","      result = result.replace('%b', path.basename(self.options.inputfile, path.extname(self.options.inputfile)));","      return result;","    }","","    function _screenShotInternal(callback) {","","      // get correct dimensions","      self._prepare(function(err) {","        if(err) {","          return callback(err);","        }","        if (!self.metaData.durationsec) {","          var errString = 'meta data contains no duration, aborting screenshot creation';","          self.options.logger.warn(errString);","          return callback(new Error(errString));","        }","","        // check if all timemarks are inside duration","        if (Array.isArray(timemarks)) {","          for (var i = 0; i &lt; timemarks.length; i++) {","            /* convert percentage to seconds */","            if( timemarks[i].indexOf('%') &gt; 0 ) {","              timemarks[i] = (parseInt(timemarks[i], 10) / 100) * self.metaData.durationsec;","            }","            if (parseInt(timemarks[i], 10) &gt; self.metaData.durationsec) {","              // remove timemark from array","              timemarks.splice(i, 1);","              --i;","            }","          }","          // if there are no more timemarks around, add one at end of the file","          if (timemarks.length === 0) {","            timemarks[0] = (self.metaData.durationsec * 0.9);","          }","        }","        // get positions for screenshots (using duration of file minus 10% to remove fade-in/fade-out)","        var secondOffset = (self.metaData.durationsec * 0.9) / screenshotcount;","        var donecount = 0;","        var series = [];","","        // reset iterator","        var j = 1;","","        var filenames = [];","","        // use async helper function to generate all screenshots and","        // fire callback just once after work is done","        async.until(","          function() {","            return j &gt; screenshotcount;","          },","          function(taskcallback) {","            var offset;","            if (Array.isArray(timemarks)) {","              // get timemark for current iteration","              offset = timemarks[(j - 1)];","            } else {","              offset = secondOffset * j;","            }","            var fname = _renderOutputName(j, offset) + (fileextension ? fileextension : '.jpg');","            var target = self.escapedPath(path.join(folder, fname), true);","            var input = self.escapedPath(self.options.inputfile, true);","","            // build screenshot command","            var command = [","              self.ffmpegPath,","              [","                '-ss', Math.floor(offset * 100) / 100,","                '-i', input,","                '-vcodec', 'mjpeg',","                '-vframes', '1',","                '-an',","                '-f', 'rawvideo',","                '-s', self.options.video.size,","                '-y', target","                ].join(' ')","            ];","","            j++;","","            // only set niceness if running on a non-windows platform","            if (self.options.hasOwnProperty('_nice.level') &amp;&amp; !os.match(/win(32|64)/)) {","              // execute ffmpeg through nice","              command.unshift('nice -n', self.options._nice.level||0);","            }","","            exec(command.join(' '), taskcallback);","            filenames.push(fname);","          },","          function(err) {","            callback(err, filenames);","          }","        );","      });","    }","","    var timemarks, screenshotcount, filename, fileextension;","    if (typeof config === 'object') {","      // use json object as config","      if (config.count) {","        screenshotcount = config.count;","      }","      if (config.timemarks) {","        timemarks = config.timemarks;","      }","      if (config.fileextension){","        fileextension = config.fileextension;","      }","    } else {","      // assume screenshot count as parameter","      screenshotcount = config;","      timemarks = null;","    }","    if (!this.options.video.size) {","      this.options.logger.warn(\"set size of thumbnails using 'withSize' method\");","      callback(new Error(\"set size of thumbnails using 'withSize' method\"));","    }","","    filename = config.filename || 'tn_%ss';","    if(!/%0*i/.test(filename) &amp;&amp; Array.isArray(timemarks) &amp;&amp; timemarks.length &gt; 1 ) {","      // if there are multiple timemarks but no %i in filename add one","      // so we won't overwrite the same thumbnail with each timemark","      filename += '_%i';","    }","    folder = folder || '.';","","    var self = this;","","    // WORKAROUND: exists will be moved from path to fs with node v0.7","    var check = fs.exists;","    if (!check) {","      check = path.exists;","    }","","    this.options.requireMetaData = true;","","    // check target folder","    check(folder, function(exists) {","      if (!exists) {","        fs.mkdir(folder, '0755', function(err) {","          if (err !== null) {","            callback(err);","          } else {","            _screenShotInternal(callback);","          }","        });","      } else {","        _screenShotInternal(callback);","      }","    });","  };","","  this._getProgressFromStdErr = function(stderrString, totalDurationSec) {","    // get last stderr line","    var lastLine = stderrString.split(/\\r\\n|\\r|\\n/g);","    var ll = lastLine[lastLine.length - 2];","    var progress;","    if (ll) {","      progress = ll.split(/frame=([0-9\\s]+)fps=([0-9\\.\\s]+)q=([0-9\\.\\s]+)(L?)size=([0-9\\s]+)kB time=(([0-9]{2}):([0-9]{2}):([0-9]{2}).([0-9]{2})) bitrate=([0-9\\.\\s]+)kbits/ig);    ","    }","    if (progress &amp;&amp; progress.length &gt; 10) {","      // build progress report object","      var ret = {","        frames: parseInt(progress[1], 10),","        currentFps: parseInt(progress[2], 10),","        currentKbps: parseFloat(progress[10]),","        targetSize: parseInt(progress[5], 10),","        timemark: progress[6]","      };","","      // calculate percent progress using duration","      if (totalDurationSec &amp;&amp; totalDurationSec &gt; 0) {","        ret.percent = (this.ffmpegTimemarkToSeconds(ret.timemark) / totalDurationSec) * 100;","      }","","      this.options.onProgress(ret);","    }","  };","","  this._checkStdErrForCodec = function(stderrString) {","    var format= /Input #[0-9]+, ([^ ]+),/.exec(stderrString);","    var dur   = /Duration\\: ([^,]+)/.exec(stderrString);","    var audio = /Audio\\: (.*)/.exec(stderrString);","    var video = /Video\\: (.*)/.exec(stderrString);","    var codecObject = { format: '', audio: '', video: '', duration: '' };","","    if (format &amp;&amp; format.length &gt; 1) {","      codecObject.format = format[1];","    }","","    if (dur &amp;&amp; dur.length &gt; 1) {","      codecObject.duration = dur[1];","    }","","    if (audio &amp;&amp; audio.length &gt; 1) {","      audio = audio[1].split(', ');","      codecObject.audio = audio[0];","      codecObject.audio_details = audio;","    }","    if (video &amp;&amp; video.length &gt; 1) {","      video = video[1].split(', ');","      codecObject.video = video[0];","      codecObject.video_details = video;","    }","","    var codecInfoPassed = /Press (\\[q\\]|ctrl-c) to stop/.test(stderrString);","    if (codecInfoPassed) {","      this.options.onCodecData(codecObject);","      this.options.onCodecData = null;","    }","  };","","  this._spawnProcess = function(args, options) {","    var retProc = spawn(this.ffmpegPath, args, options);","    // only re-nice if running on a non-windows platform","    if (this.options.hasOwnProperty('_nice.level') &amp;&amp; !os.match(/win(32|64)/)) {","      var niceLevel = this.options._nice.level || 0;","      if (niceLevel &gt; 0) {","        niceLevel = '+' + niceLevel;","      }","      // renice the spawned process without waiting for callback","      var self = this;","      var command = [","        'renice -n', niceLevel,","        '-p', retProc.pid","      ].join(' ');","","      exec(command, function(err, stderr, stdout) {","        if (!err) {","          self.options.logger.info('successfully reniced process ' + retProc.pid + ' to ' + niceLevel + ' niceness!');","        }","      });","    }","    if (retProc.stderr) {","      retProc.stderr.setEncoding('utf8');","    }","    return retProc;","  };","","  this.buildFfmpegArgs = function(overrideOutputCheck) {","    var args = [];","","    // add startoffset and duration","    if (this.options.starttime) {","      args.push('-ss', this.options.starttime);","    }    ","","    if (this.options.video.loop) {","      args.push('-loop', 1);  ","    }","    ","","    // add input format","    if (this.options.fromFormat) {","      args.push('-f', this.options.fromFormat);","    }","","    // add input file (if using fs mode)","    if (this.options.inputfile &amp;&amp; !this.options.inputstream &amp;&amp; !this.options.inputlive) {","      // add input file fps","      if (this.options.video.fpsInput) {","        args.push('-r', this.options.video.fpsInput);","      }","      if (/^[a-z]+:\\/\\//.test(this.options.inputfile)) {","        args.push('-i', this.options.inputfile.replace(' ', '%20'));","      } else if (/%\\d*d/.test(this.options.inputfile)) { // multi-file format - http://ffmpeg.org/ffmpeg.html#image2-1","        args.push('-i', this.options.inputfile.replace(' ', '\\ '));","      } else {","        var fstats = fs.statSync(this.options.inputfile);","        if (fstats.isFile()) {","          // fix for spawn call with path containing spaces and quotes","          args.push('-i', this.options.inputfile.replace(/ /g, \"\\ \")","            .replace(/'/g, \"\\'\")","            .replace(/\"/g, \"\\\"\"));","        } else {","          this.options.logger.error('input file is not readable');","          throw new Error('input file is not readable');","        }","      }","    // check for input stream","    } else if (this.options.inputstream) {","      // push args to make ffmpeg read from stdin","      args.push('-i', '-');","    } else if (this.options.inputlive){","    \t//Check if input URI","    \tif(/^[a-z]+:\\/\\//.test(this.options.inputfile)) {","    \t\t// add input with live flag","    \t\targs.push('-i', this.options.inputfile.replace(' ', '%20')+' live=1');","    \t}else {","    \t\tthis.options.logger.error('live input URI is not valid');","    \t\tthrow new Error('live input URI is not valid');","    \t}","    }","","    if (this.options.otherInputs) {","      if (this.options.otherInputs.length &gt; 0) {","        this.options.otherInputs.forEach(function(el) {","          args.push('-i', el);","        });","      }","    }","","    if (this.options.duration) {","      args.push('-t', this.options.duration);","    }","","    if (this.options.video.framecount) {","      args.push('-vframes', this.options.video.framecount);","    }","","    // add format","    if (this.options.format) {","      args.push('-f', this.options.format);","    }","","    // add video options","    if (this.options.video.skip) {","      // skip video stream completely (#45)","      args.push('-vn');","    } else {","      if (this.options.video.bitrate) {","        args.push('-b', this.options.video.bitrate + 'k');","        if (this.options._useConstantVideoBitrate) {","          // add parameters to ensure constant bitrate encoding","          args.push('-maxrate', this.options.video.bitrate + 'k');","          args.push('-minrate', this.options.video.bitrate + 'k');","          args.push('-bufsize', '3M');","        }","      }","      if (this.options.video.codec) {","        args.push('-vcodec', this.options.video.codec);","      }","      if (this.options.video.fps) {","        args.push('-r', this.options.video.fps);","      }","      if (this.options.video.aspect) {","        args.push('-aspect', this.options.video.aspect);","      }","    }","","    // add video options","    if (this.options.audio.skip) {","      // skip audio stream completely (#45)","      args.push('-an');","    } else {","      if (this.options.audio.bitrate) {","        args.push('-ab', this.options.audio.bitrate + 'k');","      }","      if (this.options.audio.channels) {","        args.push('-ac', this.options.audio.channels);","      }","      if (this.options.audio.codec) {","        args.push('-acodec', this.options.audio.codec);","      }","      if (this.options.audio.frequency) {","        args.push('-ar', this.options.audio.frequency);","      }","      if (this.options.audio.quality || this.options.audio.quality === 0) {","        args.push('-aq', this.options.audio.quality);","      }","    }","","    // add additional options","    if (this.options.additional) {","      if (this.options.additional.length &gt; 0) {","        this.options.additional.forEach(function(el) {","          args.push(el);","        });","      }","    }","","    if (this.options.video.pad &amp;&amp; !this.options.video.skip) {","      // we have padding arguments, push","      if (this.atLeastVersion(this.metaData.ffmpegversion, '0.7')) {","        // padding is not supported ffmpeg &lt; 0.7 (only using legacy commands which were replaced by vfilter calls)","        args.push('-vf');","        args.push('pad=' + this.options.video.pad.w +","          ':' + this.options.video.pad.h +","          ':' + this.options.video.pad.x +","          ':' + this.options.video.pad.y +","          ':' + this.options.video.padcolor);","      } else {","        return new Error(\"Your ffmpeg version \" + this.metaData.ffmpegversion + \" does not support padding\");","      }","    }","","    // add size and output file","    if (this.options.video.size &amp;&amp; !this.options.video.skip) {","      args.push('-s', this.options.video.size);","    }","","    // add output file fps","    if (this.options.video.fpsOutput) {","      args.push('-r', this.options.video.fpsOutput);","    }","","    if (this.options.outputfile) {","      var target = this.escapedPath(this.options.outputfile, false);","      if (!os.match(/win(32|64)/)) {","        args.push('-y', target.replace(' ', '\\\\ '));","      } else {","        args.push('-y', target);","      }","    } else {","      if (!overrideOutputCheck) {","        this.options.logger.error('no outputfile specified');","      }","    }","    return args;","  };","","","  this.requiresMetaData = function() {","    ","    if (this.options.video.pad &amp;&amp; !this.options.video.skip)","    {","      return true;","    }","","    if (this.options.onProgress)","    {","      return true;","    }","","    if (this.options.requireMetaData)","    {","      return true;","    }","","    return false;","  };","};"];
