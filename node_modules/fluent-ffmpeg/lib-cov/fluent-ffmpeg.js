/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['fluent-ffmpeg.js']) {
  _$jscoverage['fluent-ffmpeg.js'] = [];
  _$jscoverage['fluent-ffmpeg.js'][1] = 0;
  _$jscoverage['fluent-ffmpeg.js'][13] = 0;
  _$jscoverage['fluent-ffmpeg.js'][14] = 0;
  _$jscoverage['fluent-ffmpeg.js'][21] = 0;
  _$jscoverage['fluent-ffmpeg.js'][23] = 0;
  _$jscoverage['fluent-ffmpeg.js'][24] = 0;
  _$jscoverage['fluent-ffmpeg.js'][26] = 0;
  _$jscoverage['fluent-ffmpeg.js'][35] = 0;
  _$jscoverage['fluent-ffmpeg.js'][38] = 0;
  _$jscoverage['fluent-ffmpeg.js'][39] = 0;
  _$jscoverage['fluent-ffmpeg.js'][40] = 0;
  _$jscoverage['fluent-ffmpeg.js'][42] = 0;
  _$jscoverage['fluent-ffmpeg.js'][43] = 0;
  _$jscoverage['fluent-ffmpeg.js'][44] = 0;
  _$jscoverage['fluent-ffmpeg.js'][46] = 0;
  _$jscoverage['fluent-ffmpeg.js'][47] = 0;
  _$jscoverage['fluent-ffmpeg.js'][51] = 0;
  _$jscoverage['fluent-ffmpeg.js'][54] = 0;
  _$jscoverage['fluent-ffmpeg.js'][75] = 0;
  _$jscoverage['fluent-ffmpeg.js'][77] = 0;
  _$jscoverage['fluent-ffmpeg.js'][78] = 0;
  _$jscoverage['fluent-ffmpeg.js'][79] = 0;
  _$jscoverage['fluent-ffmpeg.js'][80] = 0;
  _$jscoverage['fluent-ffmpeg.js'][82] = 0;
  _$jscoverage['fluent-ffmpeg.js'][84] = 0;
  _$jscoverage['fluent-ffmpeg.js'][86] = 0;
  _$jscoverage['fluent-ffmpeg.js'][88] = 0;
  _$jscoverage['fluent-ffmpeg.js'][89] = 0;
  _$jscoverage['fluent-ffmpeg.js'][90] = 0;
  _$jscoverage['fluent-ffmpeg.js'][92] = 0;
  _$jscoverage['fluent-ffmpeg.js'][93] = 0;
  _$jscoverage['fluent-ffmpeg.js'][94] = 0;
  _$jscoverage['fluent-ffmpeg.js'][96] = 0;
  _$jscoverage['fluent-ffmpeg.js'][97] = 0;
  _$jscoverage['fluent-ffmpeg.js'][98] = 0;
  _$jscoverage['fluent-ffmpeg.js'][100] = 0;
  _$jscoverage['fluent-ffmpeg.js'][101] = 0;
  _$jscoverage['fluent-ffmpeg.js'][103] = 0;
  _$jscoverage['fluent-ffmpeg.js'][104] = 0;
  _$jscoverage['fluent-ffmpeg.js'][106] = 0;
  _$jscoverage['fluent-ffmpeg.js'][107] = 0;
  _$jscoverage['fluent-ffmpeg.js'][108] = 0;
  _$jscoverage['fluent-ffmpeg.js'][110] = 0;
  _$jscoverage['fluent-ffmpeg.js'][111] = 0;
  _$jscoverage['fluent-ffmpeg.js'][112] = 0;
  _$jscoverage['fluent-ffmpeg.js'][113] = 0;
  _$jscoverage['fluent-ffmpeg.js'][115] = 0;
  _$jscoverage['fluent-ffmpeg.js'][117] = 0;
  _$jscoverage['fluent-ffmpeg.js'][119] = 0;
  _$jscoverage['fluent-ffmpeg.js'][120] = 0;
  _$jscoverage['fluent-ffmpeg.js'][121] = 0;
  _$jscoverage['fluent-ffmpeg.js'][123] = 0;
  _$jscoverage['fluent-ffmpeg.js'][124] = 0;
  _$jscoverage['fluent-ffmpeg.js'][125] = 0;
  _$jscoverage['fluent-ffmpeg.js'][127] = 0;
  _$jscoverage['fluent-ffmpeg.js'][128] = 0;
  _$jscoverage['fluent-ffmpeg.js'][129] = 0;
  _$jscoverage['fluent-ffmpeg.js'][131] = 0;
  _$jscoverage['fluent-ffmpeg.js'][132] = 0;
  _$jscoverage['fluent-ffmpeg.js'][133] = 0;
  _$jscoverage['fluent-ffmpeg.js'][135] = 0;
  _$jscoverage['fluent-ffmpeg.js'][136] = 0;
  _$jscoverage['fluent-ffmpeg.js'][137] = 0;
  _$jscoverage['fluent-ffmpeg.js'][139] = 0;
  _$jscoverage['fluent-ffmpeg.js'][140] = 0;
  _$jscoverage['fluent-ffmpeg.js'][141] = 0;
  _$jscoverage['fluent-ffmpeg.js'][143] = 0;
  _$jscoverage['fluent-ffmpeg.js'][144] = 0;
  _$jscoverage['fluent-ffmpeg.js'][145] = 0;
  _$jscoverage['fluent-ffmpeg.js'][146] = 0;
  _$jscoverage['fluent-ffmpeg.js'][148] = 0;
  _$jscoverage['fluent-ffmpeg.js'][150] = 0;
  _$jscoverage['fluent-ffmpeg.js'][151] = 0;
  _$jscoverage['fluent-ffmpeg.js'][152] = 0;
  _$jscoverage['fluent-ffmpeg.js'][154] = 0;
  _$jscoverage['fluent-ffmpeg.js'][155] = 0;
  _$jscoverage['fluent-ffmpeg.js'][156] = 0;
  _$jscoverage['fluent-ffmpeg.js'][158] = 0;
  _$jscoverage['fluent-ffmpeg.js'][159] = 0;
  _$jscoverage['fluent-ffmpeg.js'][161] = 0;
  _$jscoverage['fluent-ffmpeg.js'][162] = 0;
  _$jscoverage['fluent-ffmpeg.js'][163] = 0;
  _$jscoverage['fluent-ffmpeg.js'][165] = 0;
  _$jscoverage['fluent-ffmpeg.js'][166] = 0;
  _$jscoverage['fluent-ffmpeg.js'][167] = 0;
  _$jscoverage['fluent-ffmpeg.js'][169] = 0;
  _$jscoverage['fluent-ffmpeg.js'][170] = 0;
  _$jscoverage['fluent-ffmpeg.js'][171] = 0;
  _$jscoverage['fluent-ffmpeg.js'][173] = 0;
  _$jscoverage['fluent-ffmpeg.js'][174] = 0;
  _$jscoverage['fluent-ffmpeg.js'][175] = 0;
  _$jscoverage['fluent-ffmpeg.js'][177] = 0;
  _$jscoverage['fluent-ffmpeg.js'][178] = 0;
  _$jscoverage['fluent-ffmpeg.js'][179] = 0;
  _$jscoverage['fluent-ffmpeg.js'][181] = 0;
  _$jscoverage['fluent-ffmpeg.js'][182] = 0;
  _$jscoverage['fluent-ffmpeg.js'][183] = 0;
  _$jscoverage['fluent-ffmpeg.js'][185] = 0;
  _$jscoverage['fluent-ffmpeg.js'][186] = 0;
  _$jscoverage['fluent-ffmpeg.js'][187] = 0;
  _$jscoverage['fluent-ffmpeg.js'][189] = 0;
  _$jscoverage['fluent-ffmpeg.js'][190] = 0;
  _$jscoverage['fluent-ffmpeg.js'][191] = 0;
  _$jscoverage['fluent-ffmpeg.js'][192] = 0;
  _$jscoverage['fluent-ffmpeg.js'][193] = 0;
  _$jscoverage['fluent-ffmpeg.js'][194] = 0;
  _$jscoverage['fluent-ffmpeg.js'][195] = 0;
  _$jscoverage['fluent-ffmpeg.js'][197] = 0;
  _$jscoverage['fluent-ffmpeg.js'][201] = 0;
  _$jscoverage['fluent-ffmpeg.js'][203] = 0;
  _$jscoverage['fluent-ffmpeg.js'][204] = 0;
  _$jscoverage['fluent-ffmpeg.js'][205] = 0;
  _$jscoverage['fluent-ffmpeg.js'][207] = 0;
  _$jscoverage['fluent-ffmpeg.js'][208] = 0;
  _$jscoverage['fluent-ffmpeg.js'][209] = 0;
  _$jscoverage['fluent-ffmpeg.js'][212] = 0;
  _$jscoverage['fluent-ffmpeg.js'][213] = 0;
  _$jscoverage['fluent-ffmpeg.js'][214] = 0;
  _$jscoverage['fluent-ffmpeg.js'][217] = 0;
  _$jscoverage['fluent-ffmpeg.js'][218] = 0;
  _$jscoverage['fluent-ffmpeg.js'][221] = 0;
  _$jscoverage['fluent-ffmpeg.js'][222] = 0;
  _$jscoverage['fluent-ffmpeg.js'][224] = 0;
  _$jscoverage['fluent-ffmpeg.js'][226] = 0;
  _$jscoverage['fluent-ffmpeg.js'][227] = 0;
  _$jscoverage['fluent-ffmpeg.js'][228] = 0;
  _$jscoverage['fluent-ffmpeg.js'][230] = 0;
  _$jscoverage['fluent-ffmpeg.js'][231] = 0;
  _$jscoverage['fluent-ffmpeg.js'][233] = 0;
  _$jscoverage['fluent-ffmpeg.js'][237] = 0;
  _$jscoverage['fluent-ffmpeg.js'][238] = 0;
  _$jscoverage['fluent-ffmpeg.js'][239] = 0;
  _$jscoverage['fluent-ffmpeg.js'][241] = 0;
  _$jscoverage['fluent-ffmpeg.js'][242] = 0;
  _$jscoverage['fluent-ffmpeg.js'][244] = 0;
  _$jscoverage['fluent-ffmpeg.js'][245] = 0;
  _$jscoverage['fluent-ffmpeg.js'][246] = 0;
  _$jscoverage['fluent-ffmpeg.js'][248] = 0;
  _$jscoverage['fluent-ffmpeg.js'][249] = 0;
  _$jscoverage['fluent-ffmpeg.js'][250] = 0;
  _$jscoverage['fluent-ffmpeg.js'][254] = 0;
  _$jscoverage['fluent-ffmpeg.js'][255] = 0;
  _$jscoverage['fluent-ffmpeg.js'][258] = 0;
  _$jscoverage['fluent-ffmpeg.js'][259] = 0;
  _$jscoverage['fluent-ffmpeg.js'][260] = 0;
  _$jscoverage['fluent-ffmpeg.js'][262] = 0;
  _$jscoverage['fluent-ffmpeg.js'][264] = 0;
  _$jscoverage['fluent-ffmpeg.js'][265] = 0;
  _$jscoverage['fluent-ffmpeg.js'][266] = 0;
  _$jscoverage['fluent-ffmpeg.js'][267] = 0;
  _$jscoverage['fluent-ffmpeg.js'][270] = 0;
  _$jscoverage['fluent-ffmpeg.js'][271] = 0;
  _$jscoverage['fluent-ffmpeg.js'][272] = 0;
  _$jscoverage['fluent-ffmpeg.js'][274] = 0;
  _$jscoverage['fluent-ffmpeg.js'][277] = 0;
  _$jscoverage['fluent-ffmpeg.js'][281] = 0;
  _$jscoverage['fluent-ffmpeg.js'][282] = 0;
  _$jscoverage['fluent-ffmpeg.js'][285] = 0;
  _$jscoverage['fluent-ffmpeg.js'][287] = 0;
  _$jscoverage['fluent-ffmpeg.js'][288] = 0;
  _$jscoverage['fluent-ffmpeg.js'][289] = 0;
  _$jscoverage['fluent-ffmpeg.js'][290] = 0;
  _$jscoverage['fluent-ffmpeg.js'][292] = 0;
  _$jscoverage['fluent-ffmpeg.js'][293] = 0;
  _$jscoverage['fluent-ffmpeg.js'][297] = 0;
  _$jscoverage['fluent-ffmpeg.js'][298] = 0;
  _$jscoverage['fluent-ffmpeg.js'][301] = 0;
  _$jscoverage['fluent-ffmpeg.js'][302] = 0;
  _$jscoverage['fluent-ffmpeg.js'][304] = 0;
  _$jscoverage['fluent-ffmpeg.js'][308] = 0;
  _$jscoverage['fluent-ffmpeg.js'][314] = 0;
  _$jscoverage['fluent-ffmpeg.js'][315] = 0;
  _$jscoverage['fluent-ffmpeg.js'][316] = 0;
  _$jscoverage['fluent-ffmpeg.js'][317] = 0;
  _$jscoverage['fluent-ffmpeg.js'][318] = 0;
  _$jscoverage['fluent-ffmpeg.js'][321] = 0;
  _$jscoverage['fluent-ffmpeg.js'][322] = 0;
  _$jscoverage['fluent-ffmpeg.js'][326] = 0;
  _$jscoverage['fluent-ffmpeg.js'][327] = 0;
  _$jscoverage['fluent-ffmpeg.js'][329] = 0;
  _$jscoverage['fluent-ffmpeg.js'][330] = 0;
}
_$jscoverage['fluent-ffmpeg.js'][1]++;
var path = require("path"), async = require("../support/async.min.js"), exec = require("child_process").exec, spawn = require("child_process").spawn;
_$jscoverage['fluent-ffmpeg.js'][13]++;
function FfmpegCommand(args) {
  _$jscoverage['fluent-ffmpeg.js'][14]++;
  var source = args.source, timeout = args.timeout != null? args.timeout: 30, priority = args.priority || 0, logger = args.logger || null, nologging = args.nolog || false, inputlive = args.inputlive || false;
  _$jscoverage['fluent-ffmpeg.js'][21]++;
  if (! logger && ! nologging) {
    _$jscoverage['fluent-ffmpeg.js'][23]++;
    logger = require("winston");
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][24]++;
    if (! logger && nologging) {
      _$jscoverage['fluent-ffmpeg.js'][26]++;
      logger = {debug: (function () {
}), info: (function () {
}), warn: (function () {
}), error: (function () {
})};
    }
  }
  _$jscoverage['fluent-ffmpeg.js'][35]++;
  logger.exitOnError = false;
  _$jscoverage['fluent-ffmpeg.js'][38]++;
  var srcstream, srcfile;
  _$jscoverage['fluent-ffmpeg.js'][39]++;
  if (typeof source === "object") {
    _$jscoverage['fluent-ffmpeg.js'][40]++;
    if (source.readable) {
      _$jscoverage['fluent-ffmpeg.js'][42]++;
      source.pause();
      _$jscoverage['fluent-ffmpeg.js'][43]++;
      srcstream = source;
      _$jscoverage['fluent-ffmpeg.js'][44]++;
      srcfile = source.path;
    }
    else {
      _$jscoverage['fluent-ffmpeg.js'][46]++;
      logger.error("Source is not a ReadableStream instance");
      _$jscoverage['fluent-ffmpeg.js'][47]++;
      throw new Error("Source is not a ReadableStream instance");
    }
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][51]++;
    srcfile = source;
  }
  _$jscoverage['fluent-ffmpeg.js'][54]++;
  this.options = {_isStreamable: true, _updateFlvMetadata: false, _useConstantVideoBitrate: false, _nice: {level: priority}, keepPixelAspect: false, inputfile: srcfile, inputstream: srcstream, inputlive: inputlive, timeout: timeout, mergeList: [], video: {}, audio: {}, additional: [], otherInputs: [], informInputAudioCodec: null, informInputVideoCodec: null, logger: logger};
  _$jscoverage['fluent-ffmpeg.js'][75]++;
  FfmpegCommand.prototype.usingPreset = (function (preset) {
  _$jscoverage['fluent-ffmpeg.js'][77]++;
  try {
    _$jscoverage['fluent-ffmpeg.js'][78]++;
    var module = require("./presets/" + preset);
    _$jscoverage['fluent-ffmpeg.js'][79]++;
    if (typeof module.load === "function") {
      _$jscoverage['fluent-ffmpeg.js'][80]++;
      module.load(this);
    }
    _$jscoverage['fluent-ffmpeg.js'][82]++;
    return this;
  }
  catch (err) {
    _$jscoverage['fluent-ffmpeg.js'][84]++;
    throw new Error("preset " + preset + " could not be loaded");
  }
  _$jscoverage['fluent-ffmpeg.js'][86]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][88]++;
  FfmpegCommand.prototype.withNoVideo = (function () {
  _$jscoverage['fluent-ffmpeg.js'][89]++;
  this.options.video.skip = true;
  _$jscoverage['fluent-ffmpeg.js'][90]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][92]++;
  FfmpegCommand.prototype.withNoAudio = (function () {
  _$jscoverage['fluent-ffmpeg.js'][93]++;
  this.options.audio.skip = true;
  _$jscoverage['fluent-ffmpeg.js'][94]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][96]++;
  FfmpegCommand.prototype.withVideoBitrate = (function (vbitrate, type) {
  _$jscoverage['fluent-ffmpeg.js'][97]++;
  if (typeof vbitrate === "string" && vbitrate.indexOf("k") > 0) {
    _$jscoverage['fluent-ffmpeg.js'][98]++;
    vbitrate = vbitrate.replace("k", "");
  }
  _$jscoverage['fluent-ffmpeg.js'][100]++;
  if (type && type === exports.CONSTANT_BITRATE) {
    _$jscoverage['fluent-ffmpeg.js'][101]++;
    this.options._useConstantVideoBitrate = true;
  }
  _$jscoverage['fluent-ffmpeg.js'][103]++;
  this.options.video.bitrate = parseInt(vbitrate, 10);
  _$jscoverage['fluent-ffmpeg.js'][104]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][106]++;
  FfmpegCommand.prototype.withSize = (function (sizeString) {
  _$jscoverage['fluent-ffmpeg.js'][107]++;
  this.options.video.size = sizeString;
  _$jscoverage['fluent-ffmpeg.js'][108]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][110]++;
  FfmpegCommand.prototype.applyAutopadding = (function (autopad, color) {
  _$jscoverage['fluent-ffmpeg.js'][111]++;
  this.options._applyAutopad = autopad;
  _$jscoverage['fluent-ffmpeg.js'][112]++;
  if (! color) {
    _$jscoverage['fluent-ffmpeg.js'][113]++;
    this.options.video.padcolor = "black";
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][115]++;
    this.options.video.padcolor = color;
  }
  _$jscoverage['fluent-ffmpeg.js'][117]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][119]++;
  FfmpegCommand.prototype.withFps = (function (fps) {
  _$jscoverage['fluent-ffmpeg.js'][120]++;
  this.options.video.fps = fps;
  _$jscoverage['fluent-ffmpeg.js'][121]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][123]++;
  FfmpegCommand.prototype.withFpsInput = (function (fps) {
  _$jscoverage['fluent-ffmpeg.js'][124]++;
  this.options.video.fpsInput = fps;
  _$jscoverage['fluent-ffmpeg.js'][125]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][127]++;
  FfmpegCommand.prototype.withFpsOutput = (function (fps) {
  _$jscoverage['fluent-ffmpeg.js'][128]++;
  this.options.video.fpsOutput = fps;
  _$jscoverage['fluent-ffmpeg.js'][129]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][131]++;
  FfmpegCommand.prototype.withAspect = (function (aspectRatio) {
  _$jscoverage['fluent-ffmpeg.js'][132]++;
  this.options.video.aspect = aspectRatio;
  _$jscoverage['fluent-ffmpeg.js'][133]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][135]++;
  FfmpegCommand.prototype.keepPixelAspect = (function (bool) {
  _$jscoverage['fluent-ffmpeg.js'][136]++;
  this.options.keepPixelAspect = bool? true: false;
  _$jscoverage['fluent-ffmpeg.js'][137]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][139]++;
  FfmpegCommand.prototype.withVideoCodec = (function (codec) {
  _$jscoverage['fluent-ffmpeg.js'][140]++;
  this.options.video.codec = codec;
  _$jscoverage['fluent-ffmpeg.js'][141]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][143]++;
  FfmpegCommand.prototype.loop = (function (duration) {
  _$jscoverage['fluent-ffmpeg.js'][144]++;
  this.options.video.loop = true;
  _$jscoverage['fluent-ffmpeg.js'][145]++;
  if (duration) {
    _$jscoverage['fluent-ffmpeg.js'][146]++;
    this.options.duration = duration;
  }
  _$jscoverage['fluent-ffmpeg.js'][148]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][150]++;
  FfmpegCommand.prototype.takeFrames = (function (frameCount) {
  _$jscoverage['fluent-ffmpeg.js'][151]++;
  this.options.video.framecount = frameCount;
  _$jscoverage['fluent-ffmpeg.js'][152]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][154]++;
  FfmpegCommand.prototype.withAudioBitrate = (function (abitrate) {
  _$jscoverage['fluent-ffmpeg.js'][155]++;
  if (typeof abitrate === "string" && abitrate.indexOf("k") > 0) {
    _$jscoverage['fluent-ffmpeg.js'][156]++;
    abitrate = abitrate.replace("k", "");
  }
  _$jscoverage['fluent-ffmpeg.js'][158]++;
  this.options.audio.bitrate = parseInt(abitrate, 10);
  _$jscoverage['fluent-ffmpeg.js'][159]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][161]++;
  FfmpegCommand.prototype.withAudioCodec = (function (audiocodec) {
  _$jscoverage['fluent-ffmpeg.js'][162]++;
  this.options.audio.codec = audiocodec;
  _$jscoverage['fluent-ffmpeg.js'][163]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][165]++;
  FfmpegCommand.prototype.withAudioChannels = (function (audiochannels) {
  _$jscoverage['fluent-ffmpeg.js'][166]++;
  this.options.audio.channels = audiochannels;
  _$jscoverage['fluent-ffmpeg.js'][167]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][169]++;
  FfmpegCommand.prototype.withAudioFrequency = (function (frequency) {
  _$jscoverage['fluent-ffmpeg.js'][170]++;
  this.options.audio.frequency = frequency;
  _$jscoverage['fluent-ffmpeg.js'][171]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][173]++;
  FfmpegCommand.prototype.withAudioQuality = (function (quality) {
  _$jscoverage['fluent-ffmpeg.js'][174]++;
  this.options.audio.quality = parseInt(quality, 10);
  _$jscoverage['fluent-ffmpeg.js'][175]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][177]++;
  FfmpegCommand.prototype.setStartTime = (function (timestamp) {
  _$jscoverage['fluent-ffmpeg.js'][178]++;
  this.options.starttime = timestamp;
  _$jscoverage['fluent-ffmpeg.js'][179]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][181]++;
  FfmpegCommand.prototype.setDuration = (function (duration) {
  _$jscoverage['fluent-ffmpeg.js'][182]++;
  this.options.duration = duration;
  _$jscoverage['fluent-ffmpeg.js'][183]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][185]++;
  FfmpegCommand.prototype.addInput = (function (inputFile) {
  _$jscoverage['fluent-ffmpeg.js'][186]++;
  this.options.otherInputs.push(inputFile);
  _$jscoverage['fluent-ffmpeg.js'][187]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][189]++;
  FfmpegCommand.prototype.addOptions = (function (optionArray) {
  _$jscoverage['fluent-ffmpeg.js'][190]++;
  if (typeof optionArray.length !== undefined) {
    _$jscoverage['fluent-ffmpeg.js'][191]++;
    var self = this;
    _$jscoverage['fluent-ffmpeg.js'][192]++;
    optionArray.forEach((function (el) {
  _$jscoverage['fluent-ffmpeg.js'][193]++;
  if (el.indexOf(" ") > 0) {
    _$jscoverage['fluent-ffmpeg.js'][194]++;
    var values = el.split(" ");
    _$jscoverage['fluent-ffmpeg.js'][195]++;
    self.options.additional.push(values[0], values[1]);
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][197]++;
    self.options.additional.push(el);
  }
}));
  }
  _$jscoverage['fluent-ffmpeg.js'][201]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][203]++;
  FfmpegCommand.prototype.addOption = (function (option, value) {
  _$jscoverage['fluent-ffmpeg.js'][204]++;
  this.options.additional.push(option, value);
  _$jscoverage['fluent-ffmpeg.js'][205]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][207]++;
  FfmpegCommand.prototype.mergeAdd = (function (path) {
  _$jscoverage['fluent-ffmpeg.js'][208]++;
  this.options.mergeList.push(path);
  _$jscoverage['fluent-ffmpeg.js'][209]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][212]++;
  FfmpegCommand.prototype.fromFormat = (function (format) {
  _$jscoverage['fluent-ffmpeg.js'][213]++;
  this.options.fromFormat = format;
  _$jscoverage['fluent-ffmpeg.js'][214]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][217]++;
  FfmpegCommand.prototype.toFormat = (function (format) {
  _$jscoverage['fluent-ffmpeg.js'][218]++;
  this.options.format = format;
  _$jscoverage['fluent-ffmpeg.js'][221]++;
  if (this.options.format === "mp4") {
    _$jscoverage['fluent-ffmpeg.js'][222]++;
    this.options._isStreamable = false;
  }
  _$jscoverage['fluent-ffmpeg.js'][224]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][226]++;
  FfmpegCommand.prototype.updateFlvMetadata = (function () {
  _$jscoverage['fluent-ffmpeg.js'][227]++;
  this.options._updateFlvMetadata = true;
  _$jscoverage['fluent-ffmpeg.js'][228]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][230]++;
  FfmpegCommand.prototype.renice = (function (level) {
  _$jscoverage['fluent-ffmpeg.js'][231]++;
  if (! level) {
    _$jscoverage['fluent-ffmpeg.js'][233]++;
    level = 0;
  }
  _$jscoverage['fluent-ffmpeg.js'][237]++;
  if (level > 20 || level < -20) {
    _$jscoverage['fluent-ffmpeg.js'][238]++;
    this.options.logger.warn("niceness " + level + " is not valid, consider a value between -20 and +20 (whereas -20 is the highest priority)");
    _$jscoverage['fluent-ffmpeg.js'][239]++;
    level = 0;
  }
  _$jscoverage['fluent-ffmpeg.js'][241]++;
  this.options._nice.level = level;
  _$jscoverage['fluent-ffmpeg.js'][242]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][244]++;
  FfmpegCommand.prototype.onCodecData = (function (callback) {
  _$jscoverage['fluent-ffmpeg.js'][245]++;
  this.options.onCodecData = callback;
  _$jscoverage['fluent-ffmpeg.js'][246]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][248]++;
  FfmpegCommand.prototype.onProgress = (function (callback) {
  _$jscoverage['fluent-ffmpeg.js'][249]++;
  this.options.onProgress = callback;
  _$jscoverage['fluent-ffmpeg.js'][250]++;
  return this;
});
  _$jscoverage['fluent-ffmpeg.js'][254]++;
  FfmpegCommand.prototype._prepare = (function (callback) {
  _$jscoverage['fluent-ffmpeg.js'][255]++;
  var calcDimensions = false, calcPadding = false;
  _$jscoverage['fluent-ffmpeg.js'][258]++;
  var fixedWidth = /([0-9]+)x\?/.exec(this.options.video.size);
  _$jscoverage['fluent-ffmpeg.js'][259]++;
  var fixedHeight = /\?x([0-9]+)/.exec(this.options.video.size);
  _$jscoverage['fluent-ffmpeg.js'][260]++;
  var percentRatio = /\b([0-9]{1,2})%/.exec(this.options.video.size);
  _$jscoverage['fluent-ffmpeg.js'][262]++;
  if (! fixedWidth && ! fixedHeight && ! percentRatio) {
    _$jscoverage['fluent-ffmpeg.js'][264]++;
    var defaultSizestring = /([0-9]+)x([0-9]+)/.exec(this.options.video.size);
    _$jscoverage['fluent-ffmpeg.js'][265]++;
    if (this.options.video.size && ! defaultSizestring) {
      _$jscoverage['fluent-ffmpeg.js'][266]++;
      callback(new Error("could not parse size string, aborting execution"));
      _$jscoverage['fluent-ffmpeg.js'][267]++;
      return;
    }
    else {
      _$jscoverage['fluent-ffmpeg.js'][270]++;
      if (defaultSizestring) {
        _$jscoverage['fluent-ffmpeg.js'][271]++;
        this.options.video.width = parseInt(defaultSizestring[1], 10);
        _$jscoverage['fluent-ffmpeg.js'][272]++;
        this.options.video.height = parseInt(defaultSizestring[2], 10);
      }
      _$jscoverage['fluent-ffmpeg.js'][274]++;
      calcDimensions = false;
    }
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][277]++;
    calcDimensions = true;
  }
  _$jscoverage['fluent-ffmpeg.js'][281]++;
  if (this.options._applyAutopad) {
    _$jscoverage['fluent-ffmpeg.js'][282]++;
    calcPadding = true;
  }
  _$jscoverage['fluent-ffmpeg.js'][285]++;
  var self = this;
  _$jscoverage['fluent-ffmpeg.js'][287]++;
  if (calcDimensions || calcPadding || this.requiresMetaData()) {
    _$jscoverage['fluent-ffmpeg.js'][288]++;
    this.getMetadata(this.options.inputfile, (function (meta, err) {
  _$jscoverage['fluent-ffmpeg.js'][289]++;
  self.metaData = meta;
  _$jscoverage['fluent-ffmpeg.js'][290]++;
  var dimErr, padErr;
  _$jscoverage['fluent-ffmpeg.js'][292]++;
  if (calcDimensions) {
    _$jscoverage['fluent-ffmpeg.js'][293]++;
    dimErr = self._calculateDimensions(meta);
  }
  _$jscoverage['fluent-ffmpeg.js'][297]++;
  if (calcPadding) {
    _$jscoverage['fluent-ffmpeg.js'][298]++;
    padErr = self._calculatePadding(meta);
  }
  _$jscoverage['fluent-ffmpeg.js'][301]++;
  if (dimErr || padErr) {
    _$jscoverage['fluent-ffmpeg.js'][302]++;
    callback(new Error("error while preparing: dimension -> " + dimErr + " padding -> " + padErr));
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][304]++;
    callback(undefined);
  }
}));
  }
  else {
    _$jscoverage['fluent-ffmpeg.js'][308]++;
    callback(undefined);
  }
});
}
_$jscoverage['fluent-ffmpeg.js'][314]++;
require("./extensions").apply(FfmpegCommand.prototype);
_$jscoverage['fluent-ffmpeg.js'][315]++;
require("./metadata").apply(FfmpegCommand.prototype);
_$jscoverage['fluent-ffmpeg.js'][316]++;
require("./processor").apply(FfmpegCommand.prototype);
_$jscoverage['fluent-ffmpeg.js'][317]++;
require("./calculate").apply(FfmpegCommand.prototype);
_$jscoverage['fluent-ffmpeg.js'][318]++;
require("./debug").apply(FfmpegCommand.prototype);
_$jscoverage['fluent-ffmpeg.js'][321]++;
exports = module.exports = (function (args) {
  _$jscoverage['fluent-ffmpeg.js'][322]++;
  return new FfmpegCommand(args);
});
_$jscoverage['fluent-ffmpeg.js'][326]++;
exports.Metadata = require("./metadata");
_$jscoverage['fluent-ffmpeg.js'][327]++;
exports.Calculate = require("./calculate");
_$jscoverage['fluent-ffmpeg.js'][329]++;
exports.CONSTANT_BITRATE = 1;
_$jscoverage['fluent-ffmpeg.js'][330]++;
exports.VARIABLE_BITRATE = 2;
_$jscoverage['fluent-ffmpeg.js'].source = ["var path = require('path'),","  async = require('../support/async.min.js'),","  exec = require('child_process').exec,","  spawn = require('child_process').spawn;","","/* options object consists of the following keys:"," * - source: either a ReadableStream or the path to a file (required)"," * - timeout: timeout in seconds for all ffmpeg sub-processes (optional, defaults to 30)"," * - priority: default-priority for all ffmpeg sub-processes (optional, defaults to 0)"," * - logger: add a winston logging instance (optional, default is clumsy console logging)"," * - nolog: completely disables any logging"," */","function FfmpegCommand(args) {","  var source = args.source,","      timeout = args.timeout != null ? args.timeout : 30,","      priority = args.priority || 0,","      logger = args.logger || null,","      nologging = args.nolog || false,","      inputlive = args.inputlive || false;","","  if (!logger &amp;&amp; !nologging) {","    // create new winston instance","    logger = require('winston');","  } else if (!logger &amp;&amp; nologging) {","    // create fake object to route log calls","    logger = {","      debug: function() {},","      info: function() {},","      warn: function() {},","      error: function() {}","    };","  }","","  // make sure execution is not killed on error","  logger.exitOnError = false;","","  // check if argument is a stream","  var srcstream, srcfile;","  if (typeof source === 'object') {","    if (source.readable) {","      // streaming mode","      source.pause();","      srcstream = source;","      srcfile = source.path;","    } else {","      logger.error('Source is not a ReadableStream instance');","      throw new Error('Source is not a ReadableStream instance');","    }","  } else {","    // file mode","    srcfile = source;","  }","","  this.options = {","    _isStreamable: true,","    _updateFlvMetadata: false,","    _useConstantVideoBitrate: false,","    _nice: { level: priority },","    keepPixelAspect: false,","    inputfile: srcfile,","    inputstream: srcstream,","    inputlive: inputlive,","    timeout: timeout,","    mergeList:[],","    video: {},","    audio: {},","    additional: [],","    otherInputs: [],","    informInputAudioCodec: null,","    informInputVideoCodec: null,","    logger: logger","  };","","  // public chaining methods","  FfmpegCommand.prototype.usingPreset = function(preset) {","    // require preset (since require() works like a singleton, multiple calls generate no overhead)","    try {","      var module = require('./presets/' + preset);","      if (typeof module.load === 'function') {","        module.load(this);","      }","      return this;","    } catch (err) {","      throw new Error('preset ' + preset + ' could not be loaded');","    }","    return this;","  };","  FfmpegCommand.prototype.withNoVideo = function() {","    this.options.video.skip = true;","    return this;","  };","  FfmpegCommand.prototype.withNoAudio = function() {","    this.options.audio.skip = true;","    return this;","  };","  FfmpegCommand.prototype.withVideoBitrate = function(vbitrate, type) {","    if (typeof vbitrate === 'string' &amp;&amp; vbitrate.indexOf('k') &gt; 0) {","      vbitrate = vbitrate.replace('k', '');","    }","    if (type &amp;&amp; type === exports.CONSTANT_BITRATE) {","      this.options._useConstantVideoBitrate = true;","    }","    this.options.video.bitrate = parseInt(vbitrate, 10);","    return this;","  };","  FfmpegCommand.prototype.withSize = function(sizeString) {","    this.options.video.size = sizeString;","    return this;","  };","  FfmpegCommand.prototype.applyAutopadding = function(autopad, color) {","    this.options._applyAutopad = autopad;","    if (!color) {","      this.options.video.padcolor = 'black';","    } else {","      this.options.video.padcolor = color;","    }","    return this;","  };","  FfmpegCommand.prototype.withFps = function(fps) {","    this.options.video.fps = fps;","    return this;","  };","  FfmpegCommand.prototype.withFpsInput = function(fps) {","    this.options.video.fpsInput = fps;","    return this;","  };","  FfmpegCommand.prototype.withFpsOutput = function(fps) {","    this.options.video.fpsOutput = fps;","    return this;","  };","  FfmpegCommand.prototype.withAspect = function(aspectRatio) {","    this.options.video.aspect = aspectRatio;","    return this;","  };","  FfmpegCommand.prototype.keepPixelAspect = function(bool) {","    this.options.keepPixelAspect = bool ? true : false;","    return this;","  };","  FfmpegCommand.prototype.withVideoCodec = function(codec) {","    this.options.video.codec = codec;","    return this;","  };","  FfmpegCommand.prototype.loop = function(duration) {","    this.options.video.loop = true;","    if (duration) {","      this.options.duration = duration;","    }","    return this;","  };","  FfmpegCommand.prototype.takeFrames = function(frameCount) {","    this.options.video.framecount = frameCount;","    return this;","  };","  FfmpegCommand.prototype.withAudioBitrate = function(abitrate) {","    if (typeof abitrate === 'string' &amp;&amp; abitrate.indexOf('k') &gt; 0) {","      abitrate = abitrate.replace('k', '');","    }","    this.options.audio.bitrate = parseInt(abitrate, 10);","    return this;","  };","  FfmpegCommand.prototype.withAudioCodec = function(audiocodec){","    this.options.audio.codec = audiocodec;","    return this;","  };","  FfmpegCommand.prototype.withAudioChannels = function(audiochannels) {","    this.options.audio.channels = audiochannels;","    return this;","  };","  FfmpegCommand.prototype.withAudioFrequency = function(frequency) {","    this.options.audio.frequency = frequency;","    return this;","  };","  FfmpegCommand.prototype.withAudioQuality = function(quality) {","    this.options.audio.quality = parseInt(quality, 10);","    return this;","  };","  FfmpegCommand.prototype.setStartTime = function(timestamp) {","    this.options.starttime = timestamp;","    return this;","  };","  FfmpegCommand.prototype.setDuration = function(duration) {","    this.options.duration = duration;","    return this;","  };","  FfmpegCommand.prototype.addInput = function(inputFile) {","    this.options.otherInputs.push(inputFile);","    return this;","  };","  FfmpegCommand.prototype.addOptions = function(optionArray) {","    if (typeof optionArray.length !== undefined) {","        var self = this;","        optionArray.forEach(function(el) {","          if (el.indexOf(' ') &gt; 0) {","            var values = el.split(' ');","            self.options.additional.push(values[0], values[1]);","          } else {","            self.options.additional.push(el);","          }","        });","    }","    return this;","  };","  FfmpegCommand.prototype.addOption = function(option, value) {","    this.options.additional.push(option, value);","    return this;","  };","  FfmpegCommand.prototype.mergeAdd = function(path){","    this.options.mergeList.push(path)","    return this;","  };","","  FfmpegCommand.prototype.fromFormat = function(format) {","    this.options.fromFormat = format;","    return this;","  };","","  FfmpegCommand.prototype.toFormat = function(format) {","    this.options.format = format;","","    // some muxers require the output stream to be seekable, disable streaming for those formats","    if (this.options.format === 'mp4') {","      this.options._isStreamable = false;","    }","    return this;","  };","  FfmpegCommand.prototype.updateFlvMetadata = function() {","    this.options._updateFlvMetadata = true;","    return this;","  };","  FfmpegCommand.prototype.renice = function(level) {","    if (!level) {","      // use 0 as default nice level (os default)","      level = 0;","    }","","    // make sure niceness is within allowed boundaries","    if (level &gt; 20 || level &lt; -20) {","      this.options.logger.warn('niceness ' + level + ' is not valid, consider a value between -20 and +20 (whereas -20 is the highest priority)');","      level = 0;","    }","    this.options._nice.level = level;","    return this;","  };","  FfmpegCommand.prototype.onCodecData = function(callback) {","    this.options.onCodecData = callback;","    return this;","  };","  FfmpegCommand.prototype.onProgress = function(callback) {","    this.options.onProgress = callback;","    return this;","  };","","  // private methods","  FfmpegCommand.prototype._prepare = function(callback) {","    var calcDimensions = false, calcPadding = false;","","    // check for allowed sizestring formats and handle them accordingly","    var fixedWidth = /([0-9]+)x\\?/.exec(this.options.video.size);","    var fixedHeight = /\\?x([0-9]+)/.exec(this.options.video.size);","    var percentRatio = /\\b([0-9]{1,2})%/.exec(this.options.video.size);","","    if (!fixedWidth &amp;&amp; !fixedHeight &amp;&amp; !percentRatio) {","      // check for invalid size string","      var defaultSizestring = /([0-9]+)x([0-9]+)/.exec(this.options.video.size);","      if (this.options.video.size &amp;&amp; !defaultSizestring) {","        callback(new Error('could not parse size string, aborting execution'));","        return;","      } else {","        // get width and height as integers (used for padding calculation)","        if (defaultSizestring) {","          this.options.video.width = parseInt(defaultSizestring[1], 10);","          this.options.video.height = parseInt(defaultSizestring[2], 10);","        }","        calcDimensions = false;","      }","    } else {","      calcDimensions = true;","    }","","    // check if we have to check aspect ratio for changes and auto-pad the output","    if (this.options._applyAutopad) {","      calcPadding = true;","    }","","    var self = this;","","    if (calcDimensions || calcPadding || this.requiresMetaData()) {","      this.getMetadata(this.options.inputfile, function(meta, err) {","        self.metaData = meta;","        var dimErr, padErr;","        // calculate dimensions","        if (calcDimensions) {","          dimErr = self._calculateDimensions(meta);","        }","","        // calculate padding","        if (calcPadding) {","          padErr = self._calculatePadding(meta);","        }","","        if (dimErr || padErr) {","          callback(new Error('error while preparing: dimension -&gt; ' + dimErr + ' padding -&gt; ' + padErr));","        } else {","          callback(undefined);","        }","      });","    } else {","      callback(undefined);","    }","  };","}","","// add module methods","require('./extensions').apply(FfmpegCommand.prototype);","require('./metadata').apply(FfmpegCommand.prototype);","require('./processor').apply(FfmpegCommand.prototype);","require('./calculate').apply(FfmpegCommand.prototype);","require('./debug').apply(FfmpegCommand.prototype);","","// module exports","exports = module.exports = function(args) {","  return new FfmpegCommand(args);","};","","// export meta data discovery","exports.Metadata = require('./metadata');","exports.Calculate = require('./calculate');","","exports.CONSTANT_BITRATE = 1;","exports.VARIABLE_BITRATE = 2;"];
