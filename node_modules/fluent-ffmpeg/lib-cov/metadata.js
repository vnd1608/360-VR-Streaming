/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['metadata.js']) {
  _$jscoverage['metadata.js'] = [];
  _$jscoverage['metadata.js'][1] = 0;
  _$jscoverage['metadata.js'][5] = 0;
  _$jscoverage['metadata.js'][6] = 0;
  _$jscoverage['metadata.js'][7] = 0;
  _$jscoverage['metadata.js'][8] = 0;
  _$jscoverage['metadata.js'][10] = 0;
  _$jscoverage['metadata.js'][12] = 0;
  _$jscoverage['metadata.js'][13] = 0;
  _$jscoverage['metadata.js'][14] = 0;
  _$jscoverage['metadata.js'][15] = 0;
  _$jscoverage['metadata.js'][16] = 0;
  _$jscoverage['metadata.js'][17] = 0;
  _$jscoverage['metadata.js'][19] = 0;
  _$jscoverage['metadata.js'][20] = 0;
  _$jscoverage['metadata.js'][23] = 0;
  _$jscoverage['metadata.js'][26] = 0;
  _$jscoverage['metadata.js'][28] = 0;
  _$jscoverage['metadata.js'][29] = 0;
  _$jscoverage['metadata.js'][33] = 0;
  _$jscoverage['metadata.js'][34] = 0;
  _$jscoverage['metadata.js'][35] = 0;
  _$jscoverage['metadata.js'][39] = 0;
  _$jscoverage['metadata.js'][41] = 0;
  _$jscoverage['metadata.js'][42] = 0;
  _$jscoverage['metadata.js'][45] = 0;
  _$jscoverage['metadata.js'][46] = 0;
  _$jscoverage['metadata.js'][47] = 0;
  _$jscoverage['metadata.js'][51] = 0;
  _$jscoverage['metadata.js'][52] = 0;
  _$jscoverage['metadata.js'][53] = 0;
  _$jscoverage['metadata.js'][56] = 0;
  _$jscoverage['metadata.js'][82] = 0;
  _$jscoverage['metadata.js'][83] = 0;
  _$jscoverage['metadata.js'][88] = 0;
  _$jscoverage['metadata.js'][93] = 0;
  _$jscoverage['metadata.js'][126] = 0;
  _$jscoverage['metadata.js'][127] = 0;
  _$jscoverage['metadata.js'][131] = 0;
  _$jscoverage['metadata.js'][132] = 0;
  _$jscoverage['metadata.js'][133] = 0;
  _$jscoverage['metadata.js'][134] = 0;
  _$jscoverage['metadata.js'][136] = 0;
  _$jscoverage['metadata.js'][137] = 0;
  _$jscoverage['metadata.js'][138] = 0;
  _$jscoverage['metadata.js'][139] = 0;
  _$jscoverage['metadata.js'][141] = 0;
  _$jscoverage['metadata.js'][146] = 0;
  _$jscoverage['metadata.js'][147] = 0;
  _$jscoverage['metadata.js'][148] = 0;
  _$jscoverage['metadata.js'][149] = 0;
  _$jscoverage['metadata.js'][151] = 0;
  _$jscoverage['metadata.js'][152] = 0;
  _$jscoverage['metadata.js'][153] = 0;
  _$jscoverage['metadata.js'][154] = 0;
  _$jscoverage['metadata.js'][156] = 0;
  _$jscoverage['metadata.js'][161] = 0;
  _$jscoverage['metadata.js'][162] = 0;
  _$jscoverage['metadata.js'][163] = 0;
  _$jscoverage['metadata.js'][164] = 0;
  _$jscoverage['metadata.js'][166] = 0;
  _$jscoverage['metadata.js'][167] = 0;
  _$jscoverage['metadata.js'][171] = 0;
  _$jscoverage['metadata.js'][173] = 0;
}
_$jscoverage['metadata.js'][1]++;
var exec = require("child_process").exec, path = require("path"), os = require("os").platform();
_$jscoverage['metadata.js'][5]++;
exports = module.exports = (function Metadata(inputfile) {
  _$jscoverage['metadata.js'][6]++;
  this.escapedPath = (function (path, enclose) {
  _$jscoverage['metadata.js'][7]++;
  if (/http/.exec(path)) {
    _$jscoverage['metadata.js'][8]++;
    path = path.replace(" ", "%20");
  }
  else {
    _$jscoverage['metadata.js'][10]++;
    if (os.match(/win(32|64)/)) {
      _$jscoverage['metadata.js'][12]++;
      var parts = path.split(/\\/gi);
      _$jscoverage['metadata.js'][13]++;
      var fName = parts[parts.length - 1];
      _$jscoverage['metadata.js'][14]++;
      parts[parts.length - 1] = fName.replace(/[\s\\:"'*?<>|\/]+/gim, "-");
      _$jscoverage['metadata.js'][15]++;
      path = parts.join("\\");
      _$jscoverage['metadata.js'][16]++;
      if (enclose && path[0] != "\"" && path[path.length - 1] != "\"") {
        _$jscoverage['metadata.js'][17]++;
        path = "\"" + path + "\"";
      }
    }
    else {
      _$jscoverage['metadata.js'][19]++;
      if (enclose && path[0] != "\"" && path[path.length - 1] != "\"") {
        _$jscoverage['metadata.js'][20]++;
        path = "\"" + path + "\"";
      }
    }
  }
  _$jscoverage['metadata.js'][23]++;
  return path;
});
  _$jscoverage['metadata.js'][26]++;
  this.inputfile = inputfile? path.normalize(inputfile): "";
  _$jscoverage['metadata.js'][28]++;
  this.setFfmpegPath = (function (path) {
  _$jscoverage['metadata.js'][29]++;
  this.ffmpegPath = path;
});
  _$jscoverage['metadata.js'][33]++;
  this.getMetadata = (function (inputfile, callback) {
  _$jscoverage['metadata.js'][34]++;
  this.inputfile = path.normalize(inputfile);
  _$jscoverage['metadata.js'][35]++;
  this._loadDataInternal(callback);
});
  _$jscoverage['metadata.js'][39]++;
  this.get = (function (callback) {
  _$jscoverage['metadata.js'][41]++;
  require("./extensions").apply(Metadata.prototype);
  _$jscoverage['metadata.js'][42]++;
  this._loadDataInternal(callback);
});
  _$jscoverage['metadata.js'][45]++;
  this._loadDataInternal = (function (callback) {
  _$jscoverage['metadata.js'][46]++;
  if (this.metaData) {
    _$jscoverage['metadata.js'][47]++;
    return callback(this.metaData);
  }
  _$jscoverage['metadata.js'][51]++;
  var inputfile = this.escapedPath(this.inputfile, true);
  _$jscoverage['metadata.js'][52]++;
  var self = this;
  _$jscoverage['metadata.js'][53]++;
  exec(this.ffmpegPath + " -i " + inputfile, (function (err, stdout, stderr) {
  _$jscoverage['metadata.js'][56]++;
  var none = [], aspect = /DAR ([0-9\:]+)/.exec(stderr) || none, pixel = /[SP]AR ([0-9\:]+)/.exec(stderr) || none, video_bitrate = /bitrate: ([0-9]+) kb\/s/.exec(stderr) || none, fps = /([0-9\.]+) (fps|tb\(r\))/.exec(stderr) || none, container = /Input #0, ([a-zA-Z0-9]+),/.exec(stderr) || none, title = /(INAM|title)\s+:\s(.+)/i.exec(stderr) || none, artist = /artist\s+:\s(.+)/i.exec(stderr) || none, album = /album\s+:\s(.+)/i.exec(stderr) || none, track = /track\s+:\s(.+)/i.exec(stderr) || none, date = /date\s+:\s(.+)/i.exec(stderr) || none, video_stream = /Stream #([0-9\.]+)([a-z0-9\(\)\[\]]*)[:] Video/.exec(stderr) || none, video_codec = /Video: ([\w]+)/.exec(stderr) || none, duration = /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stderr) || none, resolution = /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stderr) || none, audio_bitrate = /Audio:(.)*, ([0-9]+) kb\/s/.exec(stderr) || none, sample_rate = /([0-9]+) Hz/i.exec(stderr) || none, audio_codec = /Audio: ([\w]+)/.exec(stderr) || none, channels = /Audio: [\w]+, [0-9]+ Hz, ([a-z0-9:]+)[a-z0-9\/,]*/.exec(stderr) || none, audio_stream = /Stream #([0-9\.]+)([a-z0-9\(\)\[\]]*)[:] Audio/.exec(stderr) || none, is_synched = (/start: 0.000000/.exec(stderr) !== null), rotate = /rotate[\s]+:[\s]([\d]{2,3})/.exec(stderr) || none, getVersion = /ffmpeg version (?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)/i.exec(stderr), major_brand = /major_brand\s+:\s([^\s]+)/.exec(stderr) || none, ffmpegVersion = 0;
  _$jscoverage['metadata.js'][82]++;
  if (getVersion) {
    _$jscoverage['metadata.js'][83]++;
    ffmpegVersion = [getVersion[1] >= 0? getVersion[1]: null, getVersion[2] >= 0? getVersion[2]: null, getVersion[3] >= 0? getVersion[3]: null].filter((function (val) {
  _$jscoverage['metadata.js'][88]++;
  return val !== null;
})).join(".");
  }
  _$jscoverage['metadata.js'][93]++;
  var _ref, ret = {ffmpegversion: ffmpegVersion, title: title[2] || "", artist: artist[1] || "", album: album[1] || "", track: track[1] || "", date: date[1] || "", durationraw: duration[1] || "", durationsec: duration[1]? self.ffmpegTimemarkToSeconds(duration[1]): 0, synched: is_synched, major_brand: major_brand[1], video: {container: container[1] || "", bitrate: (video_bitrate.length > 1)? parseInt(video_bitrate[1], 10): 0, codec: video_codec[1] || "", resolution: {w: resolution.length > 2? parseInt(resolution[2], 10): 0, h: resolution.length > 3? parseInt(resolution[3], 10): 0}, resolutionSquare: {}, rotate: rotate.length > 1? parseInt(rotate[1], 10): 0, fps: fps.length > 1? parseFloat(fps[1]): 0, stream: video_stream.length > 1? parseFloat(video_stream[1]): 0}, audio: {codec: audio_codec[1] || "", bitrate: parseInt((_ref = audio_bitrate[audio_bitrate.length - 1]) != null? _ref: 0, 10), sample_rate: sample_rate.length > 1? parseInt(sample_rate[1], 10): 0, stream: audio_stream.length > 1? parseFloat(audio_stream[1]): 0}};
  _$jscoverage['metadata.js'][126]++;
  if (channels.length > 0) {
    _$jscoverage['metadata.js'][127]++;
    ret.audio.channels = {stereo: 2, mono: 1}[channels[1]] || 0;
  }
  _$jscoverage['metadata.js'][131]++;
  if (aspect.length > 0) {
    _$jscoverage['metadata.js'][132]++;
    ret.video.aspectString = aspect[1];
    _$jscoverage['metadata.js'][133]++;
    var n = aspect[1].split(":");
    _$jscoverage['metadata.js'][134]++;
    ret.video.aspect = parseFloat((parseInt(n[0], 10) / parseInt(n[1], 10)));
  }
  else {
    _$jscoverage['metadata.js'][136]++;
    if (ret.video.resolution.w !== 0) {
      _$jscoverage['metadata.js'][137]++;
      var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);
      _$jscoverage['metadata.js'][138]++;
      ret.video.aspectString = ret.video.resolution.w / f + ":" + ret.video.resolution.h / f;
      _$jscoverage['metadata.js'][139]++;
      ret.video.aspect = parseFloat((ret.video.resolution.w / ret.video.resolution.h));
    }
    else {
      _$jscoverage['metadata.js'][141]++;
      ret.video.aspect = 0;
    }
  }
  _$jscoverage['metadata.js'][146]++;
  if (pixel.length > 0) {
    _$jscoverage['metadata.js'][147]++;
    ret.video.pixelString = pixel[1];
    _$jscoverage['metadata.js'][148]++;
    var n = pixel[1].split(":");
    _$jscoverage['metadata.js'][149]++;
    ret.video.pixel = parseFloat((parseInt(n[0], 10) / parseInt(n[1], 10)));
  }
  else {
    _$jscoverage['metadata.js'][151]++;
    if (ret.video.resolution.w !== 0) {
      _$jscoverage['metadata.js'][152]++;
      var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);
      _$jscoverage['metadata.js'][153]++;
      ret.video.pixelString = "1:1";
      _$jscoverage['metadata.js'][154]++;
      ret.video.pixel = 1;
    }
    else {
      _$jscoverage['metadata.js'][156]++;
      ret.video.pixel = 0;
    }
  }
  _$jscoverage['metadata.js'][161]++;
  if (ret.video.pixel !== 1 || ret.video.pixel !== 0) {
    _$jscoverage['metadata.js'][162]++;
    if (ret.video.pixel > 1) {
      _$jscoverage['metadata.js'][163]++;
      ret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);
      _$jscoverage['metadata.js'][164]++;
      ret.video.resolutionSquare.h = ret.video.resolution.h;
    }
    else {
      _$jscoverage['metadata.js'][166]++;
      ret.video.resolutionSquare.w = ret.video.resolution.w;
      _$jscoverage['metadata.js'][167]++;
      ret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);
    }
  }
  _$jscoverage['metadata.js'][171]++;
  this.metaData = ret;
  _$jscoverage['metadata.js'][173]++;
  callback(ret);
}));
});
});
_$jscoverage['metadata.js'].source = ["var exec = require('child_process').exec,","  path = require('path'),","  os = require('os').platform();","","exports = module.exports = function Metadata(inputfile) {","  this.escapedPath = function(path, enclose)  {","    if(/http/.exec(path)) {","      path = path.replace(' ', '%20');","    } else {","      if (os.match(/win(32|64)/)) {","        // on windows, we have to fix up the filename","        var parts = path.split(/\\\\/gi);","        var fName = parts[parts.length - 1];","        parts[parts.length - 1] = fName.replace(/[\\s\\\\:\"'*?&lt;&gt;|\\/]+/mig, '-');","        path = parts.join('\\\\');","        if (enclose &amp;&amp; path[0] != '\"' &amp;&amp; path[path.length-1] != '\"')","          path = '\"' + path + '\"'","      } else {","        if (enclose &amp;&amp; path[0] != '\"' &amp;&amp; path[path.length-1] != '\"')","          path = '\"' + path + '\"';","      }","    }","    return path;","  };","  ","  this.inputfile = inputfile?path.normalize(inputfile):'';","","  this.setFfmpegPath = function(path) {","    this.ffmpegPath = path;","  };","","  // for internal use","  this.getMetadata = function(inputfile, callback) {","    this.inputfile = path.normalize(inputfile);","    this._loadDataInternal(callback);","  };","","  // for external use","  this.get = function(callback) {","    // import extensions for external call","    require('./extensions').apply(Metadata.prototype);","    this._loadDataInternal(callback);","  };","","  this._loadDataInternal = function(callback) {","    if (this.metaData){","      return callback(this.metaData);","    }","    ","","    var inputfile = this.escapedPath(this.inputfile, true);","    var self = this;","    exec(this.ffmpegPath + ' -i ' + inputfile, function(err, stdout, stderr) {","      // parse data from stderr","","      var none          = []","        , aspect        = /DAR ([0-9\\:]+)/.exec(stderr) || none","        , pixel        = /[SP]AR ([0-9\\:]+)/.exec(stderr) || none","        , video_bitrate = /bitrate: ([0-9]+) kb\\/s/.exec(stderr) || none","        , fps           = /([0-9\\.]+) (fps|tb\\(r\\))/.exec(stderr) || none","        , container     = /Input #0, ([a-zA-Z0-9]+),/.exec(stderr) || none","        , title         = /(INAM|title)\\s+:\\s(.+)/i.exec(stderr) || none","        , artist        = /artist\\s+:\\s(.+)/i.exec(stderr) || none","        , album         = /album\\s+:\\s(.+)/i.exec(stderr) || none","        , track         = /track\\s+:\\s(.+)/i.exec(stderr) || none","        , date          = /date\\s+:\\s(.+)/i.exec(stderr) || none","        , video_stream  = /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Video/.exec(stderr) || none","        , video_codec   = /Video: ([\\w]+)/.exec(stderr) || none","        , duration      = /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stderr) || none","        , resolution    = /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stderr) || none","        , audio_bitrate = /Audio:(.)*, ([0-9]+) kb\\/s/.exec(stderr) || none","        , sample_rate   = /([0-9]+) Hz/i.exec(stderr) || none","        , audio_codec   = /Audio: ([\\w]+)/.exec(stderr) || none","        , channels      = /Audio: [\\w]+, [0-9]+ Hz, ([a-z0-9:]+)[a-z0-9\\/,]*/.exec(stderr) || none","        , audio_stream  = /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Audio/.exec(stderr) || none","        , is_synched    = (/start: 0.000000/.exec(stderr) !== null)","        , rotate        = /rotate[\\s]+:[\\s]([\\d]{2,3})/.exec(stderr) || none","        , getVersion    = /ffmpeg version (?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)/i.exec(stderr)","        , major_brand   = /major_brand\\s+:\\s([^\\s]+)/.exec(stderr) || none","        , ffmpegVersion = 0;","","      if (getVersion) {","        ffmpegVersion = [","          getVersion[1]&gt;=0 ? getVersion[1] : null,","          getVersion[2]&gt;=0 ? getVersion[2] : null,","          getVersion[3]&gt;=0 ? getVersion[3] : null","          ].filter(function(val) {","            return val !== null;","          }).join('.');","      }","","      // build return object","      var _ref","        , ret = {","        ffmpegversion: ffmpegVersion","        , title: title[2] || ''","        , artist: artist[1] || ''","        , album: album[1] || ''","        , track: track[1] || ''","        , date: date[1] || ''","        , durationraw: duration[1] || ''","        , durationsec: duration[1] ? self.ffmpegTimemarkToSeconds(duration[1]) : 0","        , synched: is_synched","        , major_brand: major_brand[1]","        , video: {","          container: container[1] || ''","          , bitrate: (video_bitrate.length &gt; 1) ? parseInt(video_bitrate[1], 10) : 0","          , codec: video_codec[1] || ''","          , resolution: {","            w: resolution.length &gt; 2 ? parseInt(resolution[2], 10) : 0","            , h: resolution.length &gt; 3 ? parseInt(resolution[3], 10) : 0","          }","          , resolutionSquare: {}","          , rotate: rotate.length &gt; 1 ? parseInt(rotate[1], 10) : 0","          , fps: fps.length &gt; 1 ? parseFloat(fps[1]) : 0.0","          , stream: video_stream.length &gt; 1 ? parseFloat(video_stream[1]) : 0.0","        }","        , audio: {","          codec: audio_codec[1] || ''","          , bitrate: parseInt((_ref = audio_bitrate[audio_bitrate.length - 1]) != null ? _ref : 0, 10)","          , sample_rate: sample_rate.length &gt; 1 ? parseInt(sample_rate[1], 10) : 0","          , stream: audio_stream.length &gt; 1 ? parseFloat(audio_stream[1]) : 0.0","        }","      };","","      if (channels.length &gt; 0) {","        ret.audio.channels = {stereo:2, mono:1}[channels[1]] || 0;","      }","","      // save aspect ratio for auto-padding","      if (aspect.length &gt; 0) {","        ret.video.aspectString = aspect[1];","        var n = aspect[1].split(\":\");","        ret.video.aspect = parseFloat((parseInt(n[0], 10) / parseInt(n[1], 10)));","      } else {","        if(ret.video.resolution.w !== 0) {","          var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);","          ret.video.aspectString = ret.video.resolution.w/f + ':' + ret.video.resolution.h/f;","          ret.video.aspect = parseFloat((ret.video.resolution.w / ret.video.resolution.h));","        } else {","          ret.video.aspect = 0.0;","        }","      }","","      // save pixel ratio for output size calculation","      if (pixel.length &gt; 0) {","        ret.video.pixelString = pixel[1];","        var n = pixel[1].split(\":\");","        ret.video.pixel = parseFloat((parseInt(n[0], 10) / parseInt(n[1], 10)));","      } else {","        if (ret.video.resolution.w !== 0) {","          var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);","          ret.video.pixelString = '1:1';","          ret.video.pixel = 1;","        } else {","          ret.video.pixel = 0.0;","        }","      }","","      // correct video.resolution when pixel aspectratio is not 1","      if (ret.video.pixel !== 1 || ret.video.pixel !== 0) {","        if( ret.video.pixel &gt; 1 ) {","          ret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);","          ret.video.resolutionSquare.h = ret.video.resolution.h;","        } else {","          ret.video.resolutionSquare.w = ret.video.resolution.w;","          ret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);","        }","      }","","      this.metaData = ret;","","      callback(ret);","    });","  };","};"];
