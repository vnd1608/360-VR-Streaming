/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['debug.js']) {
  _$jscoverage['debug.js'] = [];
  _$jscoverage['debug.js'][1] = 0;
  _$jscoverage['debug.js'][2] = 0;
  _$jscoverage['debug.js'][3] = 0;
  _$jscoverage['debug.js'][4] = 0;
  _$jscoverage['debug.js'][5] = 0;
  _$jscoverage['debug.js'][6] = 0;
  _$jscoverage['debug.js'][8] = 0;
  _$jscoverage['debug.js'][10] = 0;
  _$jscoverage['debug.js'][11] = 0;
  _$jscoverage['debug.js'][13] = 0;
  _$jscoverage['debug.js'][14] = 0;
  _$jscoverage['debug.js'][15] = 0;
  _$jscoverage['debug.js'][16] = 0;
  _$jscoverage['debug.js'][18] = 0;
  _$jscoverage['debug.js'][22] = 0;
  _$jscoverage['debug.js'][25] = 0;
  _$jscoverage['debug.js'][26] = 0;
  _$jscoverage['debug.js'][27] = 0;
  _$jscoverage['debug.js'][28] = 0;
  _$jscoverage['debug.js'][29] = 0;
  _$jscoverage['debug.js'][30] = 0;
  _$jscoverage['debug.js'][32] = 0;
  _$jscoverage['debug.js'][34] = 0;
  _$jscoverage['debug.js'][35] = 0;
  _$jscoverage['debug.js'][37] = 0;
  _$jscoverage['debug.js'][42] = 0;
}
_$jscoverage['debug.js'][1]++;
exports = module.exports = (function Debug(command) {
  _$jscoverage['debug.js'][2]++;
  this.getCommand = (function (outputmethod, callback) {
  _$jscoverage['debug.js'][3]++;
  var self = this;
  _$jscoverage['debug.js'][4]++;
  this._prepare((function (err, meta) {
  _$jscoverage['debug.js'][5]++;
  if (err) {
    _$jscoverage['debug.js'][6]++;
    callback(null, err);
  }
  else {
    _$jscoverage['debug.js'][8]++;
    var args = self.buildFfmpegArgs(true, meta);
    _$jscoverage['debug.js'][10]++;
    if (args.length === undefined) {
      _$jscoverage['debug.js'][11]++;
      callback(null, args);
    }
    else {
      _$jscoverage['debug.js'][13]++;
      var cmd = "";
      _$jscoverage['debug.js'][14]++;
      cmd += "ffmpeg";
      _$jscoverage['debug.js'][15]++;
      args.forEach((function (el) {
  _$jscoverage['debug.js'][16]++;
  cmd += " " + el;
}));
      _$jscoverage['debug.js'][18]++;
      callback(cmd, null);
    }
  }
}));
  _$jscoverage['debug.js'][22]++;
  return this;
});
  _$jscoverage['debug.js'][25]++;
  this.getArgs = (function (callback) {
  _$jscoverage['debug.js'][26]++;
  if (callback) {
    _$jscoverage['debug.js'][27]++;
    var self = this;
    _$jscoverage['debug.js'][28]++;
    this._prepare((function (err, meta) {
  _$jscoverage['debug.js'][29]++;
  if (err) {
    _$jscoverage['debug.js'][30]++;
    callback(null, err);
  }
  else {
    _$jscoverage['debug.js'][32]++;
    var args = self.buildFfmpegArgs(true, meta);
    _$jscoverage['debug.js'][34]++;
    if (args.length === undefined) {
      _$jscoverage['debug.js'][35]++;
      callback(null, args);
    }
    else {
      _$jscoverage['debug.js'][37]++;
      callback(args, null);
    }
  }
}));
  }
  else {
    _$jscoverage['debug.js'][42]++;
    return this.buildFfmpegArgs(true, null);
  }
});
});
_$jscoverage['debug.js'].source = ["exports = module.exports = function Debug(command) {","  this.getCommand = function(outputmethod, callback) {","    var self = this;","    this._prepare(function(err, meta) {","      if (err) {","        callback(null, err);","      } else {","        var args = self.buildFfmpegArgs(true, meta);","        // kinda hacky, have to make sure the returned object is no array","        if (args.length === undefined) {","          callback(null, args);","        } else {","          var cmd = '';","          cmd += 'ffmpeg';","          args.forEach(function(el) {","            cmd += ' ' + el;","          });","          callback(cmd, null);","        }","      }","    });","    return this;","  };","","  this.getArgs = function(callback) {","    if (callback) {","      var self = this;","      this._prepare(function(err, meta) {","        if (err) {","          callback(null, err);","        } else {","          var args = self.buildFfmpegArgs(true, meta);","          // kinda hacky, have to make sure the returned object is no array","          if (args.length === undefined) {","            callback(null, args);","          } else {","            callback(args, null);","          }","        }","      });","    } else {","      return this.buildFfmpegArgs(true, null);","    }","  };","};"];
